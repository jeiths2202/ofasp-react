
> ofasp-refactor@0.0.1 start
> BROWSER=none react-scripts start

[HPM] Proxy created: /  -> http://localhost:8000
[HPM] Proxy created: /  -> http://localhost:8000
[HPM] Proxy created: /  -> http://localhost:8000
[HPM] Proxy created: /  -> http://localhost:8000
(node:13564) [DEP_WEBPACK_DEV_SERVER_ON_AFTER_SETUP_MIDDLEWARE] DeprecationWarning: 'onAfterSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:13564) [DEP_WEBPACK_DEV_SERVER_ON_BEFORE_SETUP_MIDDLEWARE] DeprecationWarning: 'onBeforeSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
Starting the development server...

Compiled successfully!

You can now view ofasp-refactor in the browser.

  Local:            http://localhost:3005
  On Your Network:  http://172.20.0.2:3005

Note that the development build is not optimized.
To create a production build, use npm run build.

webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WorkstationAuthWrapper.tsx:389:11
TS2322: Type '{ isDarkMode: boolean; workstationName: string; user: string; }' is not assignable to type 'IntrinsicAttributes & AspCliWebTerminalProps'.
  Property 'workstationName' does not exist on type 'IntrinsicAttributes & AspCliWebTerminalProps'.
    387 |         <AspCliWebTerminal 
    388 |           isDarkMode={isDarkMode}
  > 389 |           workstationName={authState.wsname}
        |           ^^^^^^^^^^^^^^^
    390 |           user={authState.user}
    391 |         />
    392 |       </div>

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAuthWrapper.tsx:46:18
TS2339: Property 'then' does not exist on type 'void'.
    44 |             if (!webSocketService.isConnected()) {
    45 |               webSocketService.connect('http://localhost:3006')
  > 46 |                 .then(() => {
       |                  ^^^^
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
    49 |                 })

ERROR in src/components/WorkstationAuthWrapper.tsx:50:25
TS7006: Parameter 'error' implicitly has an 'any' type.
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
    49 |                 })
  > 50 |                 .catch((error) => {
       |                         ^^^^^
    51 |                   console.error('Failed to connect WebSocket:', error);
    52 |                 });
    53 |             }

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

ERROR in src/services/websocketService.ts:319:32
TS2345: Argument of type 'WebSocket | null' is not assignable to parameter of type 'WebSocket'.
  Type 'null' is not assignable to type 'WebSocket'.
    317 |         // Pass non-registration messages to original handler
    318 |         if (originalHandler) {
  > 319 |           originalHandler.call(this.ws, event);
        |                                ^^^^^^^
    320 |         }
    321 |       };
    322 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

ERROR in src/services/websocketService.ts:319:32
TS2345: Argument of type 'WebSocket | null' is not assignable to parameter of type 'WebSocket'.
  Type 'null' is not assignable to type 'WebSocket'.
    317 |         // Pass non-registration messages to original handler
    318 |         if (originalHandler) {
  > 319 |           originalHandler.call(this.ws, event);
        |                                ^^^^^^^
    320 |         }
    321 |       };
    322 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

ERROR in src/services/websocketService.ts:319:32
TS2345: Argument of type 'WebSocket | null' is not assignable to parameter of type 'WebSocket'.
  Type 'null' is not assignable to type 'WebSocket'.
    317 |         // Pass non-registration messages to original handler
    318 |         if (originalHandler) {
  > 319 |           originalHandler.call(this.ws, event);
        |                                ^^^^^^^
    320 |         }
    321 |       };
    322 |

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

ERROR in src/services/websocketService.ts:81:38
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    79 |
    80 |       // Check if connection is in progress
  > 81 |       if (this.isConnecting || (this.ws && this.ws.readyState === WebSocket.CONNECTING)) {
       |                                      ^^
    82 |         console.log('Connection already in progress, rejecting duplicate attempt');
    83 |         reject(new Error('Connection already in progress'));
    84 |         return;

ERROR in src/services/websocketService.ts:81:49
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    79 |
    80 |       // Check if connection is in progress
  > 81 |       if (this.isConnecting || (this.ws && this.ws.readyState === WebSocket.CONNECTING)) {
       |                                                 ^^
    82 |         console.log('Connection already in progress, rejecting duplicate attempt');
    83 |         reject(new Error('Connection already in progress'));
    84 |         return;

ERROR in src/services/websocketService.ts:94:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    92 |
    93 |       try {
  > 94 |         this.ws = new WebSocket(this.url);
       |              ^^
    95 |
    96 |         this.ws.onopen = () => {
    97 |           console.log('WebSocket connected successfully');

ERROR in src/services/websocketService.ts:96:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    94 |         this.ws = new WebSocket(this.url);
    95 |
  > 96 |         this.ws.onopen = () => {
       |              ^^
    97 |           console.log('WebSocket connected successfully');
    98 |           this.isConnecting = false;
    99 |           this.reconnectAttempts = 0;

ERROR in src/services/websocketService.ts:127:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    125 |         };
    126 |
  > 127 |         this.ws.onmessage = (event) => {
        |              ^^
    128 |           this.handleMessage(event.data);
    129 |         };
    130 |

ERROR in src/services/websocketService.ts:127:30
TS7006: Parameter 'event' implicitly has an 'any' type.
    125 |         };
    126 |
  > 127 |         this.ws.onmessage = (event) => {
        |                              ^^^^^
    128 |           this.handleMessage(event.data);
    129 |         };
    130 |

ERROR in src/services/websocketService.ts:131:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    129 |         };
    130 |
  > 131 |         this.ws.onerror = (error) => {
        |              ^^
    132 |           console.error('WebSocket error:', error);
    133 |           this.isConnecting = false;
    134 |           this.handlers.onError?.('WebSocket connection error');

ERROR in src/services/websocketService.ts:131:28
TS7006: Parameter 'error' implicitly has an 'any' type.
    129 |         };
    130 |
  > 131 |         this.ws.onerror = (error) => {
        |                            ^^^^^
    132 |           console.error('WebSocket error:', error);
    133 |           this.isConnecting = false;
    134 |           this.handlers.onError?.('WebSocket connection error');

ERROR in src/services/websocketService.ts:138:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    136 |         };
    137 |
  > 138 |         this.ws.onclose = (event) => {
        |              ^^
    139 |           console.log('WebSocket disconnected:', event.code, event.reason);
    140 |           this.isConnecting = false;
    141 |           this.terminalRegistered = false;

ERROR in src/services/websocketService.ts:138:28
TS7006: Parameter 'event' implicitly has an 'any' type.
    136 |         };
    137 |
  > 138 |         this.ws.onclose = (event) => {
        |                            ^^^^^
    139 |           console.log('WebSocket disconnected:', event.code, event.reason);
    140 |           this.isConnecting = false;
    141 |           this.terminalRegistered = false;

ERROR in src/services/websocketService.ts:280:17
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    278 |   private async registerTerminal(): Promise<void> {
    279 |     return new Promise((resolve, reject) => {
  > 280 |       if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
        |                 ^^
    281 |         const error = new Error('WebSocket not connected for terminal registration');
    282 |         console.error('Terminal registration failed:', error.message, 'WebSocket state:', this.ws?.readyState);
    283 |         reject(error);

ERROR in src/services/websocketService.ts:280:28
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    278 |   private async registerTerminal(): Promise<void> {
    279 |     return new Promise((resolve, reject) => {
  > 280 |       if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
        |                            ^^
    281 |         const error = new Error('WebSocket not connected for terminal registration');
    282 |         console.error('Terminal registration failed:', error.message, 'WebSocket state:', this.ws?.readyState);
    283 |         reject(error);

ERROR in src/services/websocketService.ts:282:96
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    280 |       if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
    281 |         const error = new Error('WebSocket not connected for terminal registration');
  > 282 |         console.error('Terminal registration failed:', error.message, 'WebSocket state:', this.ws?.readyState);
        |                                                                                                ^^
    283 |         reject(error);
    284 |         return;
    285 |       }

ERROR in src/services/websocketService.ts:310:36
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    308 |
    309 |       // Set up a temporary message handler for registration response
  > 310 |       const originalHandler = this.ws.onmessage;
        |                                    ^^
    311 |       this.ws.onmessage = (event) => {
    312 |         try {
    313 |           const response = JSON.parse(event.data);

ERROR in src/services/websocketService.ts:311:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    309 |       // Set up a temporary message handler for registration response
    310 |       const originalHandler = this.ws.onmessage;
  > 311 |       this.ws.onmessage = (event) => {
        |            ^^
    312 |         try {
    313 |           const response = JSON.parse(event.data);
    314 |           if (response.type === 'registration_response') {

ERROR in src/services/websocketService.ts:311:28
TS7006: Parameter 'event' implicitly has an 'any' type.
    309 |       // Set up a temporary message handler for registration response
    310 |       const originalHandler = this.ws.onmessage;
  > 311 |       this.ws.onmessage = (event) => {
        |                            ^^^^^
    312 |         try {
    313 |           const response = JSON.parse(event.data);
    314 |           if (response.type === 'registration_response') {

ERROR in src/services/websocketService.ts:316:18
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    314 |           if (response.type === 'registration_response') {
    315 |             clearTimeout(timeout);
  > 316 |             this.ws!.onmessage = originalHandler; // Restore original handler
        |                  ^^
    317 |             
    318 |             if (response.data.success) {
    319 |               this.terminalRegistered = true;

ERROR in src/services/websocketService.ts:333:37
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    331 |         // Pass non-registration messages to original handler
    332 |         if (originalHandler) {
  > 333 |           originalHandler.call(this.ws, event);
        |                                     ^^
    334 |         }
    335 |       };
    336 |

ERROR in src/services/websocketService.ts:339:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    337 |       // Send registration message
    338 |       try {
  > 339 |         this.ws.send(JSON.stringify(registrationMessage));
        |              ^^
    340 |         console.log('Sent terminal registration request:', registrationMessage);
    341 |       } catch (sendError) {
    342 |         clearTimeout(timeout);

ERROR in src/services/websocketService.ts:343:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    341 |       } catch (sendError) {
    342 |         clearTimeout(timeout);
  > 343 |         this.ws!.onmessage = originalHandler;
        |              ^^
    344 |         console.error('Failed to send terminal registration message:', sendError);
    345 |         reject(new Error(`Failed to send registration message: ${sendError}`));
    346 |       }

ERROR in src/services/websocketService.ts:386:10
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    384 |     };
    385 |
  > 386 |     this.ws!.send(JSON.stringify(message));
        |          ^^
    387 |     console.log('Sent command:', message);
    388 |   }
    389 |

ERROR in src/services/websocketService.ts:448:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    446 |     console.log('Disconnecting WebSocket service...');
    447 |     
  > 448 |     if (this.ws) {
        |              ^^
    449 |       this.ws.close(1000, 'Client disconnect');
    450 |       this.ws = null;
    451 |     }

ERROR in src/services/websocketService.ts:449:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    447 |     
    448 |     if (this.ws) {
  > 449 |       this.ws.close(1000, 'Client disconnect');
        |            ^^
    450 |       this.ws = null;
    451 |     }
    452 |     

ERROR in src/services/websocketService.ts:450:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    448 |     if (this.ws) {
    449 |       this.ws.close(1000, 'Client disconnect');
  > 450 |       this.ws = null;
        |            ^^
    451 |     }
    452 |     
    453 |     // Reset all state

ERROR in src/services/websocketService.ts:464:17
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    462 |
    463 |   public isConnected(): boolean {
  > 464 |     return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
        |                 ^^
    465 |   }
    466 |
    467 |   public isTerminalRegistered(): boolean {

ERROR in src/services/websocketService.ts:464:37
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    462 |
    463 |   public isConnected(): boolean {
  > 464 |     return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
        |                                     ^^
    465 |   }
    466 |
    467 |   public isTerminalRegistered(): boolean {

ERROR in src/services/websocketService.ts:472:15
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    470 |
    471 |   public getConnectionState(): string {
  > 472 |     if (!this.ws) return 'DISCONNECTED';
        |               ^^
    473 |     
    474 |     switch (this.ws.readyState) {
    475 |       case WebSocket.CONNECTING: return 'CONNECTING';

ERROR in src/services/websocketService.ts:474:18
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    472 |     if (!this.ws) return 'DISCONNECTED';
    473 |     
  > 474 |     switch (this.ws.readyState) {
        |                  ^^
    475 |       case WebSocket.CONNECTING: return 'CONNECTING';
    476 |       case WebSocket.OPEN: return 'CONNECTED';
    477 |       case WebSocket.CLOSING: return 'CLOSING';

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

ERROR in src/services/websocketService.ts:137:14
TS2339: Property 'registerTerminalWithSocketIO' does not exist on type 'WebSocketService'.
    135 |         console.log('[WEBSOCKET] Registering terminal with workstation info:', this.workstationInfo);
    136 |         
  > 137 |         this.registerTerminalWithSocketIO()
        |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    138 |           .then(() => {
    139 |             console.log('[WEBSOCKET] Terminal registration completed successfully');
    140 |             this.handlers.onConnect?.();

ERROR in src/services/websocketService.ts:143:19
TS7006: Parameter 'error' implicitly has an 'any' type.
    141 |             resolve();
    142 |           })
  > 143 |           .catch((error) => {
        |                   ^^^^^
    144 |             console.error('[WEBSOCKET] Terminal registration failed:', error);
    145 |             this.handlers.onError?.(`Terminal registration failed: ${error.message}`);
    146 |             reject(error);

ERROR in src/services/websocketService.ts:172:12
TS2339: Property 'handleSMEDDisplay' does not exist on type 'WebSocketService'.
    170 |     this.socket.on('smed_display', (data: any) => {
    171 |       console.log('[WEBSOCKET] Received SMED display data:', data);
  > 172 |       this.handleSMEDDisplay(data);
        |            ^^^^^^^^^^^^^^^^^
    173 |     });
    174 |
    175 |     // Handle terminal registration response

ERROR in src/services/websocketService.ts:361:17
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    359 |   private async registerTerminal(): Promise<void> {
    360 |     return new Promise((resolve, reject) => {
  > 361 |       if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
        |                 ^^
    362 |         const error = new Error('WebSocket not connected for terminal registration');
    363 |         console.error('Terminal registration failed:', error.message, 'WebSocket state:', this.ws?.readyState);
    364 |         reject(error);

ERROR in src/services/websocketService.ts:361:28
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    359 |   private async registerTerminal(): Promise<void> {
    360 |     return new Promise((resolve, reject) => {
  > 361 |       if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
        |                            ^^
    362 |         const error = new Error('WebSocket not connected for terminal registration');
    363 |         console.error('Terminal registration failed:', error.message, 'WebSocket state:', this.ws?.readyState);
    364 |         reject(error);

ERROR in src/services/websocketService.ts:363:96
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    361 |       if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
    362 |         const error = new Error('WebSocket not connected for terminal registration');
  > 363 |         console.error('Terminal registration failed:', error.message, 'WebSocket state:', this.ws?.readyState);
        |                                                                                                ^^
    364 |         reject(error);
    365 |         return;
    366 |       }

ERROR in src/services/websocketService.ts:391:36
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    389 |
    390 |       // Set up a temporary message handler for registration response
  > 391 |       const originalHandler = this.ws.onmessage;
        |                                    ^^
    392 |       this.ws.onmessage = (event) => {
    393 |         try {
    394 |           const response = JSON.parse(event.data);

ERROR in src/services/websocketService.ts:392:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    390 |       // Set up a temporary message handler for registration response
    391 |       const originalHandler = this.ws.onmessage;
  > 392 |       this.ws.onmessage = (event) => {
        |            ^^
    393 |         try {
    394 |           const response = JSON.parse(event.data);
    395 |           if (response.type === 'registration_response') {

ERROR in src/services/websocketService.ts:392:28
TS7006: Parameter 'event' implicitly has an 'any' type.
    390 |       // Set up a temporary message handler for registration response
    391 |       const originalHandler = this.ws.onmessage;
  > 392 |       this.ws.onmessage = (event) => {
        |                            ^^^^^
    393 |         try {
    394 |           const response = JSON.parse(event.data);
    395 |           if (response.type === 'registration_response') {

ERROR in src/services/websocketService.ts:397:18
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    395 |           if (response.type === 'registration_response') {
    396 |             clearTimeout(timeout);
  > 397 |             this.ws!.onmessage = originalHandler; // Restore original handler
        |                  ^^
    398 |             
    399 |             if (response.data.success) {
    400 |               this.terminalRegistered = true;

ERROR in src/services/websocketService.ts:414:37
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    412 |         // Pass non-registration messages to original handler
    413 |         if (originalHandler) {
  > 414 |           originalHandler.call(this.ws, event);
        |                                     ^^
    415 |         }
    416 |       };
    417 |

ERROR in src/services/websocketService.ts:420:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    418 |       // Send registration message
    419 |       try {
  > 420 |         this.ws.send(JSON.stringify(registrationMessage));
        |              ^^
    421 |         console.log('Sent terminal registration request:', registrationMessage);
    422 |       } catch (sendError) {
    423 |         clearTimeout(timeout);

ERROR in src/services/websocketService.ts:424:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    422 |       } catch (sendError) {
    423 |         clearTimeout(timeout);
  > 424 |         this.ws!.onmessage = originalHandler;
        |              ^^
    425 |         console.error('Failed to send terminal registration message:', sendError);
    426 |         reject(new Error(`Failed to send registration message: ${sendError}`));
    427 |       }

ERROR in src/services/websocketService.ts:467:10
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    465 |     };
    466 |
  > 467 |     this.ws!.send(JSON.stringify(message));
        |          ^^
    468 |     console.log('Sent command:', message);
    469 |   }
    470 |

ERROR in src/services/websocketService.ts:529:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    527 |     console.log('Disconnecting WebSocket service...');
    528 |     
  > 529 |     if (this.ws) {
        |              ^^
    530 |       this.ws.close(1000, 'Client disconnect');
    531 |       this.ws = null;
    532 |     }

ERROR in src/services/websocketService.ts:530:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    528 |     
    529 |     if (this.ws) {
  > 530 |       this.ws.close(1000, 'Client disconnect');
        |            ^^
    531 |       this.ws = null;
    532 |     }
    533 |     

ERROR in src/services/websocketService.ts:531:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    529 |     if (this.ws) {
    530 |       this.ws.close(1000, 'Client disconnect');
  > 531 |       this.ws = null;
        |            ^^
    532 |     }
    533 |     
    534 |     // Reset all state

ERROR in src/services/websocketService.ts:545:17
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    543 |
    544 |   public isConnected(): boolean {
  > 545 |     return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
        |                 ^^
    546 |   }
    547 |
    548 |   public isTerminalRegistered(): boolean {

ERROR in src/services/websocketService.ts:545:37
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    543 |
    544 |   public isConnected(): boolean {
  > 545 |     return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
        |                                     ^^
    546 |   }
    547 |
    548 |   public isTerminalRegistered(): boolean {

ERROR in src/services/websocketService.ts:553:15
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    551 |
    552 |   public getConnectionState(): string {
  > 553 |     if (!this.ws) return 'DISCONNECTED';
        |               ^^
    554 |     
    555 |     switch (this.ws.readyState) {
    556 |       case WebSocket.CONNECTING: return 'CONNECTING';

ERROR in src/services/websocketService.ts:555:18
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    553 |     if (!this.ws) return 'DISCONNECTED';
    554 |     
  > 555 |     switch (this.ws.readyState) {
        |                  ^^
    556 |       case WebSocket.CONNECTING: return 'CONNECTING';
    557 |       case WebSocket.OPEN: return 'CONNECTED';
    558 |       case WebSocket.CLOSING: return 'CLOSING';

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

ERROR in src/services/websocketService.ts:540:10
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    538 |     };
    539 |
  > 540 |     this.ws!.send(JSON.stringify(message));
        |          ^^
    541 |     console.log('Sent command:', message);
    542 |   }
    543 |

ERROR in src/services/websocketService.ts:602:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    600 |     console.log('Disconnecting WebSocket service...');
    601 |     
  > 602 |     if (this.ws) {
        |              ^^
    603 |       this.ws.close(1000, 'Client disconnect');
    604 |       this.ws = null;
    605 |     }

ERROR in src/services/websocketService.ts:603:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    601 |     
    602 |     if (this.ws) {
  > 603 |       this.ws.close(1000, 'Client disconnect');
        |            ^^
    604 |       this.ws = null;
    605 |     }
    606 |     

ERROR in src/services/websocketService.ts:604:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    602 |     if (this.ws) {
    603 |       this.ws.close(1000, 'Client disconnect');
  > 604 |       this.ws = null;
        |            ^^
    605 |     }
    606 |     
    607 |     // Reset all state

ERROR in src/services/websocketService.ts:618:17
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    616 |
    617 |   public isConnected(): boolean {
  > 618 |     return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
        |                 ^^
    619 |   }
    620 |
    621 |   public isTerminalRegistered(): boolean {

ERROR in src/services/websocketService.ts:618:37
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    616 |
    617 |   public isConnected(): boolean {
  > 618 |     return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
        |                                     ^^
    619 |   }
    620 |
    621 |   public isTerminalRegistered(): boolean {

ERROR in src/services/websocketService.ts:626:15
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    624 |
    625 |   public getConnectionState(): string {
  > 626 |     if (!this.ws) return 'DISCONNECTED';
        |               ^^
    627 |     
    628 |     switch (this.ws.readyState) {
    629 |       case WebSocket.CONNECTING: return 'CONNECTING';

ERROR in src/services/websocketService.ts:628:18
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    626 |     if (!this.ws) return 'DISCONNECTED';
    627 |     
  > 628 |     switch (this.ws.readyState) {
        |                  ^^
    629 |       case WebSocket.CONNECTING: return 'CONNECTING';
    630 |       case WebSocket.OPEN: return 'CONNECTED';
    631 |       case WebSocket.CLOSING: return 'CLOSING';

Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

ERROR in src/services/websocketService.ts:540:10
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    538 |     };
    539 |
  > 540 |     this.ws!.send(JSON.stringify(message));
        |          ^^
    541 |     console.log('Sent command:', message);
    542 |   }
    543 |

ERROR in src/services/websocketService.ts:602:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    600 |     console.log('Disconnecting WebSocket service...');
    601 |     
  > 602 |     if (this.ws) {
        |              ^^
    603 |       this.ws.close(1000, 'Client disconnect');
    604 |       this.ws = null;
    605 |     }

ERROR in src/services/websocketService.ts:603:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    601 |     
    602 |     if (this.ws) {
  > 603 |       this.ws.close(1000, 'Client disconnect');
        |            ^^
    604 |       this.ws = null;
    605 |     }
    606 |     

ERROR in src/services/websocketService.ts:604:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    602 |     if (this.ws) {
    603 |       this.ws.close(1000, 'Client disconnect');
  > 604 |       this.ws = null;
        |            ^^
    605 |     }
    606 |     
    607 |     // Reset all state

ERROR in src/services/websocketService.ts:618:17
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    616 |
    617 |   public isConnected(): boolean {
  > 618 |     if (this.socket && this.socket.connected !== undefined) {
        |                 ^^
    619 |       // Socket.IO connection
    620 |       return this.socket.connected;
    621 |     } else if (this.socket && this.socket.readyState !== undefined) {

ERROR in src/services/websocketService.ts:618:37
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    616 |
    617 |   public isConnected(): boolean {
  > 618 |     if (this.socket && this.socket.connected !== undefined) {
        |                                     ^^
    619 |       // Socket.IO connection
    620 |       return this.socket.connected;
    621 |     } else if (this.socket && this.socket.readyState !== undefined) {

ERROR in src/services/websocketService.ts:626:15
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    624 |     }
    625 |     return false;
  > 626 |   }
        |    ^^
    627 |
    628 |   public isTerminalRegistered(): boolean {
    629 |     return this.terminalRegistered && this.isConnected();

ERROR in src/services/websocketService.ts:628:18
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    626 |   }
    627 |
  > 628 |   public isTerminalRegistered(): boolean {
        |                  ^^
    629 |     return this.terminalRegistered && this.isConnected();
    630 |   }
    631 |

Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

ERROR in src/services/websocketService.ts:540:10
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    538 |     };
    539 |
  > 540 |     this.ws!.send(JSON.stringify(message));
        |          ^^
    541 |     console.log('Sent command:', message);
    542 |   }
    543 |

ERROR in src/services/websocketService.ts:602:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    600 |     console.log('Disconnecting WebSocket service...');
    601 |     
  > 602 |     if (this.ws) {
        |              ^^
    603 |       this.ws.close(1000, 'Client disconnect');
    604 |       this.ws = null;
    605 |     }

ERROR in src/services/websocketService.ts:603:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    601 |     
    602 |     if (this.ws) {
  > 603 |       this.ws.close(1000, 'Client disconnect');
        |            ^^
    604 |       this.ws = null;
    605 |     }
    606 |     

ERROR in src/services/websocketService.ts:604:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    602 |     if (this.ws) {
    603 |       this.ws.close(1000, 'Client disconnect');
  > 604 |       this.ws = null;
        |            ^^
    605 |     }
    606 |     
    607 |     // Reset all state

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

ERROR in src/services/websocketService.ts:614:14
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    612 |     console.log('Disconnecting WebSocket service...');
    613 |     
  > 614 |     if (this.ws) {
        |              ^^
    615 |       this.ws.close(1000, 'Client disconnect');
    616 |       this.ws = null;
    617 |     }

ERROR in src/services/websocketService.ts:615:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    613 |     
    614 |     if (this.ws) {
  > 615 |       this.ws.close(1000, 'Client disconnect');
        |            ^^
    616 |       this.ws = null;
    617 |     }
    618 |     

ERROR in src/services/websocketService.ts:616:12
TS2339: Property 'ws' does not exist on type 'WebSocketService'.
    614 |     if (this.ws) {
    615 |       this.ws.close(1000, 'Client disconnect');
  > 616 |       this.ws = null;
        |            ^^
    617 |     }
    618 |     
    619 |     // Reset all state

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:44:35
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    42 |             setAuthState(parsedAuth);
    43 |             // WebSocket 연결도 복원
  > 44 |             if (!webSocketService.isConnected()) {
       |                                   ^^^^^^^^^^^
    45 |               webSocketService.connect('http://localhost:3006')
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');

ERROR in src/components/WorkstationAuthWrapper.tsx:45:32
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    43 |             // WebSocket 연결도 복원
    44 |             if (!webSocketService.isConnected()) {
  > 45 |               webSocketService.connect('http://localhost:3006')
       |                                ^^^^^^^
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:48:36
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    46 |                 .then(() => {
    47 |                   console.log('WebSocket connected, registering terminal...');
  > 48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
       |                                    ^^^^^^^^^^^^^^^^
    49 |                 })
    50 |                 .catch((error: any) => {
    51 |                   console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:90:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    88 |     };
    89 |
  > 90 |     webSocketService.on('session_established', handleConnectionEstablished);
       |                      ^^
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:91:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    89 |
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
  > 91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    92 |     webSocketService.on('registration_error', handleRegistrationError);
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |

ERROR in src/components/WorkstationAuthWrapper.tsx:92:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    90 |     webSocketService.on('session_established', handleConnectionEstablished);
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 92 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    94 |
    95 |     return () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:93:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    91 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    92 |     webSocketService.on('registration_error', handleRegistrationError);
  > 93 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    94 |
    95 |     return () => {
    96 |       webSocketService.off('session_established', handleConnectionEstablished);

ERROR in src/components/WorkstationAuthWrapper.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |
    95 |     return () => {
  > 96 |       webSocketService.off('session_established', handleConnectionEstablished);
       |                        ^^^
    97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    98 |       webSocketService.off('registration_error', handleRegistrationError);
    99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationAuthWrapper.tsx:97:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     95 |     return () => {
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
  >  97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
        |                        ^^^
     98 |       webSocketService.off('registration_error', handleRegistrationError);
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:98:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     96 |       webSocketService.off('session_established', handleConnectionEstablished);
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  >  98 |       webSocketService.off('registration_error', handleRegistrationError);
        |                        ^^^
     99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    100 |     };
    101 |   }, [authState.wsname]);

ERROR in src/components/WorkstationAuthWrapper.tsx:99:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
     97 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
     98 |       webSocketService.off('registration_error', handleRegistrationError);
  >  99 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
        |                        ^^^
    100 |     };
    101 |   }, [authState.wsname]);
    102 |

ERROR in src/components/WorkstationAuthWrapper.tsx:122:52
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    120 |       let workstationStatus: WorkstationStatus | null = null;
    121 |       try {
  > 122 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    123 |       } catch (error: any) {
    124 |         if (error.message.includes('404')) {
    125 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:128:36
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    126 |           console.log('Workstation not found, registering new one:', workstationName);
    127 |           try {
  > 128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:129:56
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    127 |           try {
    128 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 129 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    130 |           } catch (regError) {
    131 |             console.error('Failed to register workstation:', regError);
    132 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:142:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    140 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    141 |         try {
  > 142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:143:54
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    141 |         try {
    142 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 143 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    144 |         } catch (updateError) {
    145 |           console.error('Failed to enable workstation:', updateError);
    146 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:151:29
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    149 |
    150 |       // WebSocket 연결
  > 151 |       if (!webSocketService.isConnected()) {
        |                             ^^^^^^^^^^^
    152 |         try {
    153 |           await webSocketService.connect('http://localhost:3006');
    154 |           console.log('WebSocket connected successfully');

ERROR in src/components/WorkstationAuthWrapper.tsx:153:34
TS2339: Property 'connect' does not exist on type 'typeof WebSocketService'.
    151 |       if (!webSocketService.isConnected()) {
    152 |         try {
  > 153 |           await webSocketService.connect('http://localhost:3006');
        |                                  ^^^^^^^
    154 |           console.log('WebSocket connected successfully');
    155 |         } catch (error) {
    156 |           console.error('Failed to connect WebSocket:', error);

ERROR in src/components/WorkstationAuthWrapper.tsx:163:24
TS2339: Property 'registerTerminal' does not exist on type 'typeof WebSocketService'.
    161 |       // 터미널 등록
    162 |       const user = authState.user;
  > 163 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    164 |
    165 |       // 등록 완료 대기
    166 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:173:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    171 |         const handleRegistered = () => {
    172 |           clearTimeout(timeout);
  > 173 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    174 |           webSocketService.off('registration_error', handleRegError);
    175 |           resolve(undefined);
    176 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:174:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    172 |           clearTimeout(timeout);
    173 |           webSocketService.off('terminal_registered', handleRegistered);
  > 174 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    175 |           resolve(undefined);
    176 |         };
    177 |

ERROR in src/components/WorkstationAuthWrapper.tsx:180:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    178 |         const handleRegError = (data: { error: string }) => {
    179 |           clearTimeout(timeout);
  > 180 |           webSocketService.off('terminal_registered', handleRegistered);
        |                            ^^^
    181 |           webSocketService.off('registration_error', handleRegError);
    182 |           reject(new Error(data.error));
    183 |         };

ERROR in src/components/WorkstationAuthWrapper.tsx:181:28
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    179 |           clearTimeout(timeout);
    180 |           webSocketService.off('terminal_registered', handleRegistered);
  > 181 |           webSocketService.off('registration_error', handleRegError);
        |                            ^^^
    182 |           reject(new Error(data.error));
    183 |         };
    184 |

ERROR in src/components/WorkstationAuthWrapper.tsx:185:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    183 |         };
    184 |
  > 185 |         webSocketService.on('terminal_registered', handleRegistered);
        |                          ^^
    186 |         webSocketService.on('registration_error', handleRegError);
    187 |       });
    188 |

ERROR in src/components/WorkstationAuthWrapper.tsx:186:26
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    184 |
    185 |         webSocketService.on('terminal_registered', handleRegistered);
  > 186 |         webSocketService.on('registration_error', handleRegError);
        |                          ^^
    187 |       });
    188 |
    189 |       // 인증 성공

ERROR in src/components/WorkstationAuthWrapper.tsx:212:22
TS2339: Property 'disconnect' does not exist on type 'typeof WebSocketService'.
    210 |   const handleLogoff = useCallback(() => {
    211 |     // WebSocket 연결 해제
  > 212 |     webSocketService.disconnect();
        |                      ^^^^^^^^^^
    213 |     
    214 |     // 인증 상태 초기화
    215 |     setAuthState({

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:46:18
TS2339: Property 'then' does not exist on type 'void'.
    44 |             if (!webSocketService.isConnected()) {
    45 |               webSocketService.connect('http://localhost:3006')
  > 46 |                 .then(() => {
       |                  ^^^^
    47 |                   console.log('WebSocket connected, registering terminal...');
    48 |                   webSocketService.registerTerminal('webui', parsedAuth.user, parsedAuth.wsname);
    49 |                 })

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Failed to compile.

SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/WorkstationAuthWrapper.tsx: Unexpected token (48:17)
  46 |               // Note: The new WebSocket service handles connection and registration automatically
  47 |                   console.error('Failed to connect WebSocket:', error);
> 48 |                 });
     |                  ^
  49 |             }
  50 |           }
  51 |         } catch (error) {
ERROR in ./src/components/WorkstationAuthWrapper.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/WorkstationAuthWrapper.tsx: Unexpected token (48:17)

  46 |               // Note: The new WebSocket service handles connection and registration automatically
  47 |                   console.error('Failed to connect WebSocket:', error);
> 48 |                 });
     |                  ^
  49 |             }
  50 |           }
  51 |         } catch (error) {
    at constructor (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6627:19)
    at TypeScriptParserMixin.unexpected (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6647:16)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11442:16)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseExpressionBase (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10779:23)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:17)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12895:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseTryStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13205:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12804:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)

webpack compiled with 1 error
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationAuthWrapper.tsx:19:7
TS2322: Type '({ isDarkMode }: WorkstationAuthWrapperProps) => void' is not assignable to type 'FC<WorkstationAuthWrapperProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    17 | }
    18 |
  > 19 | const WorkstationAuthWrapper: React.FC<WorkstationAuthWrapperProps> = ({ isDarkMode }) => {
       |       ^^^^^^^^^^^^^^^^^^^^^^
    20 |   const [authState, setAuthState] = useState<AuthState>({
    21 |     isAuthenticated: false,
    22 |     wsname: '',

ERROR in src/components/WorkstationAuthWrapper.tsx:48:18
TS1128: Declaration or statement expected.
    46 |               // Note: The new WebSocket service handles connection and registration automatically
    47 |                   console.error('Failed to connect WebSocket:', error);
  > 48 |                 });
       |                  ^
    49 |             }
    50 |           }
    51 |         } catch (error) {

ERROR in src/components/WorkstationAuthWrapper.tsx:50:11
TS1128: Declaration or statement expected.
    48 |                 });
    49 |             }
  > 50 |           }
       |           ^
    51 |         } catch (error) {
    52 |           console.error('Error parsing saved auth:', error);
    53 |           localStorage.removeItem('workstationAuth');

ERROR in src/components/WorkstationAuthWrapper.tsx:51:9
TS1128: Declaration or statement expected.
    49 |             }
    50 |           }
  > 51 |         } catch (error) {
       |         ^
    52 |           console.error('Error parsing saved auth:', error);
    53 |           localStorage.removeItem('workstationAuth');
    54 |         }

ERROR in src/components/WorkstationAuthWrapper.tsx:51:11
TS1005: 'try' expected.
    49 |             }
    50 |           }
  > 51 |         } catch (error) {
       |           ^^^^^
    52 |           console.error('Error parsing saved auth:', error);
    53 |           localStorage.removeItem('workstationAuth');
    54 |         }

ERROR in src/components/WorkstationAuthWrapper.tsx:55:7
TS1128: Declaration or statement expected.
    53 |           localStorage.removeItem('workstationAuth');
    54 |         }
  > 55 |       }
       |       ^
    56 |       setIsInitializing(false);
    57 |     };
    58 |

ERROR in src/components/WorkstationAuthWrapper.tsx:56:7
TS2304: Cannot find name 'setIsInitializing'.
    54 |         }
    55 |       }
  > 56 |       setIsInitializing(false);
       |       ^^^^^^^^^^^^^^^^^
    57 |     };
    58 |
    59 |     checkExistingAuth();

ERROR in src/components/WorkstationAuthWrapper.tsx:57:5
TS1128: Declaration or statement expected.
    55 |       }
    56 |       setIsInitializing(false);
  > 57 |     };
       |     ^
    58 |
    59 |     checkExistingAuth();
    60 |   }, []);

ERROR in src/components/WorkstationAuthWrapper.tsx:59:5
TS2304: Cannot find name 'checkExistingAuth'.
    57 |     };
    58 |
  > 59 |     checkExistingAuth();
       |     ^^^^^^^^^^^^^^^^^
    60 |   }, []);
    61 |
    62 |   // WebSocket 이벤트 핸들러 설정

ERROR in src/components/WorkstationAuthWrapper.tsx:60:3
TS1128: Declaration or statement expected.
    58 |
    59 |     checkExistingAuth();
  > 60 |   }, []);
       |   ^
    61 |
    62 |   // WebSocket 이벤트 핸들러 설정
    63 |   useEffect(() => {

ERROR in src/components/WorkstationAuthWrapper.tsx:60:4
TS1128: Declaration or statement expected.
    58 |
    59 |     checkExistingAuth();
  > 60 |   }, []);
       |    ^
    61 |
    62 |   // WebSocket 이벤트 핸들러 설정
    63 |   useEffect(() => {

ERROR in src/components/WorkstationAuthWrapper.tsx:60:8
TS1005: ';' expected.
    58 |
    59 |     checkExistingAuth();
  > 60 |   }, []);
       |        ^
    61 |
    62 |   // WebSocket 이벤트 핸들러 설정
    63 |   useEffect(() => {

ERROR in src/components/WorkstationAuthWrapper.tsx:70:7
TS2304: Cannot find name 'setError'.
    68 |     const handleTerminalRegistered = (data: any) => {
    69 |       console.log('Terminal registered successfully:', data);
  > 70 |       setError('');
       |       ^^^^^^^^
    71 |     };
    72 |
    73 |     const handleRegistrationError = (data: { error: string }) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:75:7
TS2304: Cannot find name 'setError'.
    73 |     const handleRegistrationError = (data: { error: string }) => {
    74 |       console.error('Terminal registration failed:', data.error);
  > 75 |       setError(`Registration failed: ${data.error}`);
       |       ^^^^^^^^
    76 |       setIsConnecting(false);
    77 |     };
    78 |

ERROR in src/components/WorkstationAuthWrapper.tsx:76:7
TS2304: Cannot find name 'setIsConnecting'.
    74 |       console.error('Terminal registration failed:', data.error);
    75 |       setError(`Registration failed: ${data.error}`);
  > 76 |       setIsConnecting(false);
       |       ^^^^^^^^^^^^^^^
    77 |     };
    78 |
    79 |     const handleWorkstationDisabled = (data: { wsname: string }) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:80:27
TS2304: Cannot find name 'authState'.
    78 |
    79 |     const handleWorkstationDisabled = (data: { wsname: string }) => {
  > 80 |       if (data.wsname === authState.wsname) {
       |                           ^^^^^^^^^
    81 |         setError('Workstation has been disabled by administrator');
    82 |         handleLogoff();
    83 |       }

ERROR in src/components/WorkstationAuthWrapper.tsx:81:9
TS2304: Cannot find name 'setError'.
    79 |     const handleWorkstationDisabled = (data: { wsname: string }) => {
    80 |       if (data.wsname === authState.wsname) {
  > 81 |         setError('Workstation has been disabled by administrator');
       |         ^^^^^^^^
    82 |         handleLogoff();
    83 |       }
    84 |     };

ERROR in src/components/WorkstationAuthWrapper.tsx:97:7
TS2304: Cannot find name 'authState'.
     95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
     96 |     };
  >  97 |   }, [authState.wsname]);
        |       ^^^^^^^^^
     98 |
     99 |   const handleWsnameChange = useCallback((wsname: string, valid: boolean) => {
    100 |     setWorkstationName(wsname);

ERROR in src/components/WorkstationAuthWrapper.tsx:100:5
TS2304: Cannot find name 'setWorkstationName'.
     98 |
     99 |   const handleWsnameChange = useCallback((wsname: string, valid: boolean) => {
  > 100 |     setWorkstationName(wsname);
        |     ^^^^^^^^^^^^^^^^^^
    101 |     setIsValid(valid);
    102 |     setError('');
    103 |   }, []);

ERROR in src/components/WorkstationAuthWrapper.tsx:101:5
TS2304: Cannot find name 'setIsValid'.
     99 |   const handleWsnameChange = useCallback((wsname: string, valid: boolean) => {
    100 |     setWorkstationName(wsname);
  > 101 |     setIsValid(valid);
        |     ^^^^^^^^^^
    102 |     setError('');
    103 |   }, []);
    104 |

ERROR in src/components/WorkstationAuthWrapper.tsx:102:5
TS2304: Cannot find name 'setError'.
    100 |     setWorkstationName(wsname);
    101 |     setIsValid(valid);
  > 102 |     setError('');
        |     ^^^^^^^^
    103 |   }, []);
    104 |
    105 |   const handleLogin = useCallback(async () => {

ERROR in src/components/WorkstationAuthWrapper.tsx:106:10
TS2304: Cannot find name 'isValid'.
    104 |
    105 |   const handleLogin = useCallback(async () => {
  > 106 |     if (!isValid || !workstationName) {
        |          ^^^^^^^
    107 |       setError('Please enter a valid workstation name');
    108 |       return;
    109 |     }

ERROR in src/components/WorkstationAuthWrapper.tsx:106:22
TS2304: Cannot find name 'workstationName'.
    104 |
    105 |   const handleLogin = useCallback(async () => {
  > 106 |     if (!isValid || !workstationName) {
        |                      ^^^^^^^^^^^^^^^
    107 |       setError('Please enter a valid workstation name');
    108 |       return;
    109 |     }

ERROR in src/components/WorkstationAuthWrapper.tsx:107:7
TS2304: Cannot find name 'setError'.
    105 |   const handleLogin = useCallback(async () => {
    106 |     if (!isValid || !workstationName) {
  > 107 |       setError('Please enter a valid workstation name');
        |       ^^^^^^^^
    108 |       return;
    109 |     }
    110 |

ERROR in src/components/WorkstationAuthWrapper.tsx:111:5
TS2304: Cannot find name 'setIsConnecting'.
    109 |     }
    110 |
  > 111 |     setIsConnecting(true);
        |     ^^^^^^^^^^^^^^^
    112 |     setError('');
    113 |
    114 |     try {

ERROR in src/components/WorkstationAuthWrapper.tsx:112:5
TS2304: Cannot find name 'setError'.
    110 |
    111 |     setIsConnecting(true);
  > 112 |     setError('');
        |     ^^^^^^^^
    113 |
    114 |     try {
    115 |       // 먼저 Workstation 상태 확인

ERROR in src/components/WorkstationAuthWrapper.tsx:118:73
TS2304: Cannot find name 'workstationName'.
    116 |       let workstationStatus: WorkstationStatus | null = null;
    117 |       try {
  > 118 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                                         ^^^^^^^^^^^^^^^
    119 |       } catch (error: any) {
    120 |         if (error.message.includes('404')) {
    121 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:122:70
TS2304: Cannot find name 'workstationName'.
    120 |         if (error.message.includes('404')) {
    121 |           // Workstation이 존재하지 않으면 자동 등록
  > 122 |           console.log('Workstation not found, registering new one:', workstationName);
        |                                                                      ^^^^^^^^^^^^^^^
    123 |           try {
    124 |             await webSocketService.registerWorkstation(workstationName, 'ON');
    125 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);

ERROR in src/components/WorkstationAuthWrapper.tsx:124:56
TS2304: Cannot find name 'workstationName'.
    122 |           console.log('Workstation not found, registering new one:', workstationName);
    123 |           try {
  > 124 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                                        ^^^^^^^^^^^^^^^
    125 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    126 |           } catch (regError) {
    127 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:125:77
TS2304: Cannot find name 'workstationName'.
    123 |           try {
    124 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 125 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                                             ^^^^^^^^^^^^^^^
    126 |           } catch (regError) {
    127 |             console.error('Failed to register workstation:', regError);
    128 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:138:58
TS2304: Cannot find name 'workstationName'.
    136 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    137 |         try {
  > 138 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                                          ^^^^^^^^^^^^^^^
    139 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    140 |         } catch (updateError) {
    141 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:139:75
TS2304: Cannot find name 'workstationName'.
    137 |         try {
    138 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 139 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                                           ^^^^^^^^^^^^^^^
    140 |         } catch (updateError) {
    141 |           console.error('Failed to enable workstation:', updateError);
    142 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:158:20
TS2304: Cannot find name 'authState'.
    156 |
    157 |       // 터미널 등록
  > 158 |       const user = authState.user;
        |                    ^^^^^^^^^
    159 |       webSocketService.registerTerminal('webui', user, workstationName);
    160 |
    161 |       // 등록 완료 대기

ERROR in src/components/WorkstationAuthWrapper.tsx:159:56
TS2304: Cannot find name 'workstationName'.
    157 |       // 터미널 등록
    158 |       const user = authState.user;
  > 159 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                                                        ^^^^^^^^^^^^^^^
    160 |
    161 |       // 등록 완료 대기
    162 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationAuthWrapper.tsx:188:17
TS2304: Cannot find name 'workstationName'.
    186 |       const newAuthState: AuthState = {
    187 |         isAuthenticated: true,
  > 188 |         wsname: workstationName,
        |                 ^^^^^^^^^^^^^^^
    189 |         status: workstationStatus,
    190 |         user: user
    191 |       };

ERROR in src/components/WorkstationAuthWrapper.tsx:193:7
TS2304: Cannot find name 'setAuthState'.
    191 |       };
    192 |
  > 193 |       setAuthState(newAuthState);
        |       ^^^^^^^^^^^^
    194 |       
    195 |       // 인증 정보 저장
    196 |       localStorage.setItem('workstationAuth', JSON.stringify(newAuthState));

ERROR in src/components/WorkstationAuthWrapper.tsx:200:7
TS2304: Cannot find name 'setError'.
    198 |     } catch (error: any) {
    199 |       console.error('Login failed:', error);
  > 200 |       setError(error.message || 'Connection failed. Please check if the server is running.');
        |       ^^^^^^^^
    201 |     } finally {
    202 |       setIsConnecting(false);
    203 |     }

ERROR in src/components/WorkstationAuthWrapper.tsx:202:7
TS2304: Cannot find name 'setIsConnecting'.
    200 |       setError(error.message || 'Connection failed. Please check if the server is running.');
    201 |     } finally {
  > 202 |       setIsConnecting(false);
        |       ^^^^^^^^^^^^^^^
    203 |     }
    204 |   }, [isValid, workstationName, authState.user]);
    205 |

ERROR in src/components/WorkstationAuthWrapper.tsx:204:7
TS2304: Cannot find name 'isValid'.
    202 |       setIsConnecting(false);
    203 |     }
  > 204 |   }, [isValid, workstationName, authState.user]);
        |       ^^^^^^^
    205 |
    206 |   const handleLogoff = useCallback(() => {
    207 |     // WebSocket 연결 해제

ERROR in src/components/WorkstationAuthWrapper.tsx:204:16
TS2304: Cannot find name 'workstationName'.
    202 |       setIsConnecting(false);
    203 |     }
  > 204 |   }, [isValid, workstationName, authState.user]);
        |                ^^^^^^^^^^^^^^^
    205 |
    206 |   const handleLogoff = useCallback(() => {
    207 |     // WebSocket 연결 해제

ERROR in src/components/WorkstationAuthWrapper.tsx:204:33
TS2304: Cannot find name 'authState'.
    202 |       setIsConnecting(false);
    203 |     }
  > 204 |   }, [isValid, workstationName, authState.user]);
        |                                 ^^^^^^^^^
    205 |
    206 |   const handleLogoff = useCallback(() => {
    207 |     // WebSocket 연결 해제

ERROR in src/components/WorkstationAuthWrapper.tsx:211:5
TS2304: Cannot find name 'setAuthState'.
    209 |     
    210 |     // 인증 상태 초기화
  > 211 |     setAuthState({
        |     ^^^^^^^^^^^^
    212 |       isAuthenticated: false,
    213 |       wsname: '',
    214 |       status: null,

ERROR in src/components/WorkstationAuthWrapper.tsx:222:5
TS2304: Cannot find name 'setWorkstationName'.
    220 |     
    221 |     // 폼 상태 초기화
  > 222 |     setWorkstationName('WSNAME00');
        |     ^^^^^^^^^^^^^^^^^^
    223 |     setIsValid(false);
    224 |     setError('');
    225 |   }, []);

ERROR in src/components/WorkstationAuthWrapper.tsx:223:5
TS2304: Cannot find name 'setIsValid'.
    221 |     // 폼 상태 초기화
    222 |     setWorkstationName('WSNAME00');
  > 223 |     setIsValid(false);
        |     ^^^^^^^^^^
    224 |     setError('');
    225 |   }, []);
    226 |

ERROR in src/components/WorkstationAuthWrapper.tsx:224:5
TS2304: Cannot find name 'setError'.
    222 |     setWorkstationName('WSNAME00');
    223 |     setIsValid(false);
  > 224 |     setError('');
        |     ^^^^^^^^
    225 |   }, []);
    226 |
    227 |   // 초기화 중이면 로딩 표시

ERROR in src/components/WorkstationAuthWrapper.tsx:228:7
TS2304: Cannot find name 'isInitializing'.
    226 |
    227 |   // 초기화 중이면 로딩 표시
  > 228 |   if (isInitializing) {
        |       ^^^^^^^^^^^^^^
    229 |     return (
    230 |       <div className={`min-h-screen flex items-center justify-center ${isDarkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
    231 |         <div className="text-center">

ERROR in src/components/WorkstationAuthWrapper.tsx:242:8
TS2304: Cannot find name 'authState'.
    240 |
    241 |   // 인증되지 않은 경우 로그인 화면 표시
  > 242 |   if (!authState.isAuthenticated) {
        |        ^^^^^^^^^
    243 |     return (
    244 |       <div className={`min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 ${isDarkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
    245 |         <div className="max-w-md w-full space-y-8">

ERROR in src/components/WorkstationAuthWrapper.tsx:379:1
TS1128: Declaration or statement expected.
    377 |     </div>
    378 |   );
  > 379 | };
        | ^
    380 |
    381 | export default WorkstationAuthWrapper;

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatus.tsx:25:81
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    23 | }) => {
    24 |   const [isConnected, setIsConnected] = useState(false);
  > 25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
       |                                                                                 ^^^^^^^^^^^^^^^^^^
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());

ERROR in src/components/WorkstationStatus.tsx:26:75
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    24 |   const [isConnected, setIsConnected] = useState(false);
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
  > 26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
       |                                                                           ^^^^^^^
    27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');

ERROR in src/components/WorkstationStatus.tsx:27:93
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    25 |   const [currentWsname, setCurrentWsname] = useState(wsname || webSocketService.getWorkstationName());
    26 |   const [currentUser, setCurrentUser] = useState(user || webSocketService.getUser());
  > 27 |   const [currentTerminalId, setCurrentTerminalId] = useState(terminalId || webSocketService.getTerminalId());
       |                                                                                             ^^^^^^^^^^^^^
    28 |   const [lastActivity, setLastActivity] = useState<Date>(new Date());
    29 |   const [workstationStatus, setWorkstationStatus] = useState<'ON' | 'OFF' | 'UNKNOWN'>('UNKNOWN');
    30 |

ERROR in src/components/WorkstationStatus.tsx:34:39
TS2339: Property 'isConnected' does not exist on type 'typeof WebSocketService'.
    32 |     // Update connection status
    33 |     const updateConnectionStatus = () => {
  > 34 |       setIsConnected(webSocketService.isConnected());
       |                                       ^^^^^^^^^^^
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());

ERROR in src/components/WorkstationStatus.tsx:35:41
TS2339: Property 'getWorkstationName' does not exist on type 'typeof WebSocketService'.
    33 |     const updateConnectionStatus = () => {
    34 |       setIsConnected(webSocketService.isConnected());
  > 35 |       setCurrentWsname(webSocketService.getWorkstationName());
       |                                         ^^^^^^^^^^^^^^^^^^
    36 |       setCurrentUser(webSocketService.getUser());
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());

ERROR in src/components/WorkstationStatus.tsx:36:39
TS2339: Property 'getUser' does not exist on type 'typeof WebSocketService'.
    34 |       setIsConnected(webSocketService.isConnected());
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
  > 36 |       setCurrentUser(webSocketService.getUser());
       |                                       ^^^^^^^
    37 |       setCurrentTerminalId(webSocketService.getTerminalId());
    38 |       setLastActivity(new Date());
    39 |     };

ERROR in src/components/WorkstationStatus.tsx:37:45
TS2339: Property 'getTerminalId' does not exist on type 'typeof WebSocketService'.
    35 |       setCurrentWsname(webSocketService.getWorkstationName());
    36 |       setCurrentUser(webSocketService.getUser());
  > 37 |       setCurrentTerminalId(webSocketService.getTerminalId());
       |                                             ^^^^^^^^^^^^^
    38 |       setLastActivity(new Date());
    39 |     };
    40 |

ERROR in src/components/WorkstationStatus.tsx:77:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    75 |
    76 |     // Register event listeners
  > 77 |     webSocketService.on('connected', handleConnected);
       |                      ^^
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:78:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    76 |     // Register event listeners
    77 |     webSocketService.on('connected', handleConnected);
  > 78 |     webSocketService.on('disconnected', handleDisconnected);
       |                      ^^
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     webSocketService.on('connected', handleConnected);
    78 |     webSocketService.on('disconnected', handleDisconnected);
  > 79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
       |                      ^^
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:80:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    78 |     webSocketService.on('disconnected', handleDisconnected);
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
  > 80 |     webSocketService.on('registration_error', handleRegistrationError);
       |                      ^^
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:81:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    79 |     webSocketService.on('terminal_registered', handleTerminalRegistered);
    80 |     webSocketService.on('registration_error', handleRegistrationError);
  > 81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
       |                      ^^
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |

ERROR in src/components/WorkstationStatus.tsx:82:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    80 |     webSocketService.on('registration_error', handleRegistrationError);
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
  > 82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
       |                      ^^
    83 |     webSocketService.on('smed_display', handleSmedDisplay);
    84 |
    85 |     // Initial status update

ERROR in src/components/WorkstationStatus.tsx:83:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    81 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
    82 |     webSocketService.on('workstation_disabled', handleWorkstationDisabled);
  > 83 |     webSocketService.on('smed_display', handleSmedDisplay);
       |                      ^^
    84 |
    85 |     // Initial status update
    86 |     updateConnectionStatus();

ERROR in src/components/WorkstationStatus.tsx:90:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    88 |     // Cleanup
    89 |     return () => {
  > 90 |       webSocketService.off('connected', handleConnected);
       |                        ^^^
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);

ERROR in src/components/WorkstationStatus.tsx:91:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    89 |     return () => {
    90 |       webSocketService.off('connected', handleConnected);
  > 91 |       webSocketService.off('disconnected', handleDisconnected);
       |                        ^^^
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationStatus.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |       webSocketService.off('connected', handleConnected);
    91 |       webSocketService.off('disconnected', handleDisconnected);
  > 92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
       |                        ^^^
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);

ERROR in src/components/WorkstationStatus.tsx:93:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    91 |       webSocketService.off('disconnected', handleDisconnected);
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
  > 93 |       webSocketService.off('registration_error', handleRegistrationError);
       |                        ^^^
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);

ERROR in src/components/WorkstationStatus.tsx:94:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    92 |       webSocketService.off('terminal_registered', handleTerminalRegistered);
    93 |       webSocketService.off('registration_error', handleRegistrationError);
  > 94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
       |                        ^^^
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };

ERROR in src/components/WorkstationStatus.tsx:95:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    93 |       webSocketService.off('registration_error', handleRegistrationError);
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
  > 95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
       |                        ^^^
    96 |       webSocketService.off('smed_display', handleSmedDisplay);
    97 |     };
    98 |   }, [currentWsname]);

ERROR in src/components/WorkstationStatus.tsx:96:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    94 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
    95 |       webSocketService.off('workstation_disabled', handleWorkstationDisabled);
  > 96 |       webSocketService.off('smed_display', handleSmedDisplay);
       |                        ^^^
    97 |     };
    98 |   }, [currentWsname]);
    99 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

ERROR in src/components/WorkstationStatusCard.tsx:79:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    77 |     };
    78 |
  > 79 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    80 |     
    81 |     // Initial fetch
    82 |     fetchStatus();

ERROR in src/components/WorkstationStatusCard.tsx:85:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    83 |
    84 |     return () => {
  > 85 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    86 |     };
    87 |   }, [wsname]);
    88 |

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'typeof WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2339: Property 'registerWorkstation' does not exist on type 'typeof WebSocketService'.
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAdmin.tsx:102:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    100 |     };
    101 |
  > 102 |     webSocketService.on('workstation_status_changed', handleWorkstationStatusChanged);
        |                      ^^
    103 |
    104 |     return () => {
    105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);

ERROR in src/components/WorkstationAdmin.tsx:105:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    103 |
    104 |     return () => {
  > 105 |       webSocketService.off('workstation_status_changed', handleWorkstationStatusChanged);
        |                        ^^^
    106 |     };
    107 |   }, []);
    108 |

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2339: Property 'getWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'typeof WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationQuickToggle.tsx:86:22
TS2339: Property 'on' does not exist on type 'typeof WebSocketService'.
    84 |     };
    85 |
  > 86 |     webSocketService.on('workstation_status_changed', handleStatusChanged);
       |                      ^^
    87 |     
    88 |     // Initial fetch
    89 |     fetchStatus();

ERROR in src/components/WorkstationQuickToggle.tsx:92:24
TS2339: Property 'off' does not exist on type 'typeof WebSocketService'.
    90 |
    91 |     return () => {
  > 92 |       webSocketService.off('workstation_status_changed', handleStatusChanged);
       |                        ^^^
    93 |     };
    94 |   }, [wsname, fetchStatus]);
    95 |

Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:397:22
TS2554: Expected 2 arguments, but got 1.
    395 |   useEffect(() => {
    396 |     // Clear any existing listeners to prevent duplicates
  > 397 |     webSocketService.off('smed_display');
        |                      ^^^^^^^^^^^^^^^^^^^
    398 |     webSocketService.off('terminal_output');
    399 |     webSocketService.off('display_map');
    400 |     webSocketService.off('msgsample_browser_data');

ERROR in src/components/AspCliWebTerminal.tsx:398:22
TS2554: Expected 2 arguments, but got 1.
    396 |     // Clear any existing listeners to prevent duplicates
    397 |     webSocketService.off('smed_display');
  > 398 |     webSocketService.off('terminal_output');
        |                      ^^^^^^^^^^^^^^^^^^^^^^
    399 |     webSocketService.off('display_map');
    400 |     webSocketService.off('msgsample_browser_data');
    401 |

ERROR in src/components/AspCliWebTerminal.tsx:399:22
TS2554: Expected 2 arguments, but got 1.
    397 |     webSocketService.off('smed_display');
    398 |     webSocketService.off('terminal_output');
  > 399 |     webSocketService.off('display_map');
        |                      ^^^^^^^^^^^^^^^^^^
    400 |     webSocketService.off('msgsample_browser_data');
    401 |
    402 |     const handleSmedDisplay = (data: any) => {

ERROR in src/components/AspCliWebTerminal.tsx:400:22
TS2554: Expected 2 arguments, but got 1.
    398 |     webSocketService.off('terminal_output');
    399 |     webSocketService.off('display_map');
  > 400 |     webSocketService.off('msgsample_browser_data');
        |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    401 |
    402 |     const handleSmedDisplay = (data: any) => {
    403 |       console.log('[WebSocket] SMED display data received:', data);

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:447:22
TS2554: Expected 2 arguments, but got 1.
    445 |   useEffect(() => {
    446 |     // Clear any existing listeners to prevent duplicates
  > 447 |     webSocketService.off('smed_display');
        |                      ^^^^^^^^^^^^^^^^^^^
    448 |     webSocketService.off('terminal_output');
    449 |     webSocketService.off('display_map');
    450 |     webSocketService.off('msgsample_browser_data');

ERROR in src/components/AspCliWebTerminal.tsx:448:22
TS2554: Expected 2 arguments, but got 1.
    446 |     // Clear any existing listeners to prevent duplicates
    447 |     webSocketService.off('smed_display');
  > 448 |     webSocketService.off('terminal_output');
        |                      ^^^^^^^^^^^^^^^^^^^^^^
    449 |     webSocketService.off('display_map');
    450 |     webSocketService.off('msgsample_browser_data');
    451 |

ERROR in src/components/AspCliWebTerminal.tsx:449:22
TS2554: Expected 2 arguments, but got 1.
    447 |     webSocketService.off('smed_display');
    448 |     webSocketService.off('terminal_output');
  > 449 |     webSocketService.off('display_map');
        |                      ^^^^^^^^^^^^^^^^^^
    450 |     webSocketService.off('msgsample_browser_data');
    451 |
    452 |     const handleSmedDisplay = (data: any) => {

ERROR in src/components/AspCliWebTerminal.tsx:450:22
TS2554: Expected 2 arguments, but got 1.
    448 |     webSocketService.off('terminal_output');
    449 |     webSocketService.off('display_map');
  > 450 |     webSocketService.off('msgsample_browser_data');
        |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    451 |
    452 |     const handleSmedDisplay = (data: any) => {
    453 |       console.log('[WebSocket] SMED display data received:', data);

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:447:22
TS2554: Expected 2 arguments, but got 1.
    445 |   useEffect(() => {
    446 |     // Clear any existing listeners to prevent duplicates
  > 447 |     webSocketService.off('smed_display');
        |                      ^^^^^^^^^^^^^^^^^^^
    448 |     webSocketService.off('terminal_output');
    449 |     webSocketService.off('display_map');
    450 |     webSocketService.off('msgsample_browser_data');

ERROR in src/components/AspCliWebTerminal.tsx:448:22
TS2554: Expected 2 arguments, but got 1.
    446 |     // Clear any existing listeners to prevent duplicates
    447 |     webSocketService.off('smed_display');
  > 448 |     webSocketService.off('terminal_output');
        |                      ^^^^^^^^^^^^^^^^^^^^^^
    449 |     webSocketService.off('display_map');
    450 |     webSocketService.off('msgsample_browser_data');
    451 |

ERROR in src/components/AspCliWebTerminal.tsx:449:22
TS2554: Expected 2 arguments, but got 1.
    447 |     webSocketService.off('smed_display');
    448 |     webSocketService.off('terminal_output');
  > 449 |     webSocketService.off('display_map');
        |                      ^^^^^^^^^^^^^^^^^^
    450 |     webSocketService.off('msgsample_browser_data');
    451 |
    452 |     const handleSmedDisplay = (data: any) => {

ERROR in src/components/AspCliWebTerminal.tsx:450:22
TS2554: Expected 2 arguments, but got 1.
    448 |     webSocketService.off('terminal_output');
    449 |     webSocketService.off('display_map');
  > 450 |     webSocketService.off('msgsample_browser_data');
        |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    451 |
    452 |     const handleSmedDisplay = (data: any) => {
    453 |       console.log('[WebSocket] SMED display data received:', data);

Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
ERROR in src/components/AspCliWebTerminal.tsx:447:22
TS2554: Expected 2 arguments, but got 1.
    445 |   useEffect(() => {
    446 |     // Clear any existing listeners to prevent duplicates
  > 447 |     webSocketService.off('smed_display');
        |                      ^^^^^^^^^^^^^^^^^^^
    448 |     webSocketService.off('terminal_output');
    449 |     webSocketService.off('display_map');
    450 |     webSocketService.off('msgsample_browser_data');

ERROR in src/components/AspCliWebTerminal.tsx:448:22
TS2554: Expected 2 arguments, but got 1.
    446 |     // Clear any existing listeners to prevent duplicates
    447 |     webSocketService.off('smed_display');
  > 448 |     webSocketService.off('terminal_output');
        |                      ^^^^^^^^^^^^^^^^^^^^^^
    449 |     webSocketService.off('display_map');
    450 |     webSocketService.off('msgsample_browser_data');
    451 |

ERROR in src/components/AspCliWebTerminal.tsx:449:22
TS2554: Expected 2 arguments, but got 1.
    447 |     webSocketService.off('smed_display');
    448 |     webSocketService.off('terminal_output');
  > 449 |     webSocketService.off('display_map');
        |                      ^^^^^^^^^^^^^^^^^^
    450 |     webSocketService.off('msgsample_browser_data');
    451 |
    452 |     const handleSmedDisplay = (data: any) => {

ERROR in src/components/AspCliWebTerminal.tsx:450:22
TS2554: Expected 2 arguments, but got 1.
    448 |     webSocketService.off('terminal_output');
    449 |     webSocketService.off('display_map');
  > 450 |     webSocketService.off('msgsample_browser_data');
        |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    451 |
    452 |     const handleSmedDisplay = (data: any) => {
    453 |       console.log('[WebSocket] SMED display data received:', data);

Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:447:22
TS2554: Expected 2 arguments, but got 1.
    445 |   useEffect(() => {
    446 |     // Clear any existing listeners to prevent duplicates
  > 447 |     webSocketService.off('smed_display');
        |                      ^^^^^^^^^^^^^^^^^^^
    448 |     webSocketService.off('terminal_output');
    449 |     webSocketService.off('display_map');
    450 |     webSocketService.off('msgsample_browser_data');

ERROR in src/components/AspCliWebTerminal.tsx:448:22
TS2554: Expected 2 arguments, but got 1.
    446 |     // Clear any existing listeners to prevent duplicates
    447 |     webSocketService.off('smed_display');
  > 448 |     webSocketService.off('terminal_output');
        |                      ^^^^^^^^^^^^^^^^^^^^^^
    449 |     webSocketService.off('display_map');
    450 |     webSocketService.off('msgsample_browser_data');
    451 |

ERROR in src/components/AspCliWebTerminal.tsx:449:22
TS2554: Expected 2 arguments, but got 1.
    447 |     webSocketService.off('smed_display');
    448 |     webSocketService.off('terminal_output');
  > 449 |     webSocketService.off('display_map');
        |                      ^^^^^^^^^^^^^^^^^^
    450 |     webSocketService.off('msgsample_browser_data');
    451 |
    452 |     const handleSmedDisplay = (data: any) => {

ERROR in src/components/AspCliWebTerminal.tsx:450:22
TS2554: Expected 2 arguments, but got 1.
    448 |     webSocketService.off('terminal_output');
    449 |     webSocketService.off('display_map');
  > 450 |     webSocketService.off('msgsample_browser_data');
        |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    451 |
    452 |     const handleSmedDisplay = (data: any) => {
    453 |       console.log('[WebSocket] SMED display data received:', data);

ERROR in src/components/SmedMapDisplay.tsx:1:46
TS2305: Module '"react"' has no exported member 'ErrorBoundary'.
  > 1 | import React, { useState, useEffect, useRef, ErrorBoundary } from 'react';
      |                                              ^^^^^^^^^^^^^
    2 | import './SmedMapDisplay.css';
    3 |
    4 | // Error Boundary Component for robust error handling

Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
ERROR in src/components/AspCliWebTerminal.tsx:447:22
TS2554: Expected 2 arguments, but got 1.
    445 |   useEffect(() => {
    446 |     // Clear any existing listeners to prevent duplicates
  > 447 |     webSocketService.off('smed_display');
        |                      ^^^^^^^^^^^^^^^^^^^
    448 |     webSocketService.off('terminal_output');
    449 |     webSocketService.off('display_map');
    450 |     webSocketService.off('msgsample_browser_data');

ERROR in src/components/AspCliWebTerminal.tsx:448:22
TS2554: Expected 2 arguments, but got 1.
    446 |     // Clear any existing listeners to prevent duplicates
    447 |     webSocketService.off('smed_display');
  > 448 |     webSocketService.off('terminal_output');
        |                      ^^^^^^^^^^^^^^^^^^^^^^
    449 |     webSocketService.off('display_map');
    450 |     webSocketService.off('msgsample_browser_data');
    451 |

ERROR in src/components/AspCliWebTerminal.tsx:449:22
TS2554: Expected 2 arguments, but got 1.
    447 |     webSocketService.off('smed_display');
    448 |     webSocketService.off('terminal_output');
  > 449 |     webSocketService.off('display_map');
        |                      ^^^^^^^^^^^^^^^^^^
    450 |     webSocketService.off('msgsample_browser_data');
    451 |
    452 |     const handleSmedDisplay = (data: any) => {

ERROR in src/components/AspCliWebTerminal.tsx:450:22
TS2554: Expected 2 arguments, but got 1.
    448 |     webSocketService.off('terminal_output');
    449 |     webSocketService.off('display_map');
  > 450 |     webSocketService.off('msgsample_browser_data');
        |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    451 |
    452 |     const handleSmedDisplay = (data: any) => {
    453 |       console.log('[WebSocket] SMED display data received:', data);

ERROR in src/components/SmedMapDisplay.tsx:1:46
TS2305: Module '"react"' has no exported member 'ErrorBoundary'.
  > 1 | import React, { useState, useEffect, useRef, ErrorBoundary } from 'react';
      |                                              ^^^^^^^^^^^^^
    2 | import './SmedMapDisplay.css';
    3 |
    4 | // Error Boundary Component for robust error handling

Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/SmedMapDisplay.tsx:1:46
TS2305: Module '"react"' has no exported member 'ErrorBoundary'.
  > 1 | import React, { useState, useEffect, useRef, ErrorBoundary } from 'react';
      |                                              ^^^^^^^^^^^^^
    2 | import './SmedMapDisplay.css';
    3 |
    4 | // Error Boundary Component for robust error handling

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/SmedMapDisplay.tsx:1:46
TS2305: Module '"react"' has no exported member 'ErrorBoundary'.
  > 1 | import React, { useState, useEffect, useRef, ErrorBoundary } from 'react';
      |                                              ^^^^^^^^^^^^^
    2 | import './SmedMapDisplay.css';
    3 |
    4 | // Error Boundary Component for robust error handling

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:467:48
TS2304: Cannot find name 'lastProcessedTime'.
    465 |       
    466 |       // Time-based duplicate prevention (ignore duplicates within 500ms)
  > 467 |       const timeSinceLastData = currentTime - (lastProcessedTime.current || 0);
        |                                                ^^^^^^^^^^^^^^^^^
    468 |       if (timeSinceLastData < 500 && lastProcessedHash.current === dataHash) {
    469 |         console.log('[WebSocket] Duplicate data within 500ms, ignoring...');
    470 |         return;

ERROR in src/components/AspCliWebTerminal.tsx:468:38
TS2304: Cannot find name 'lastProcessedHash'.
    466 |       // Time-based duplicate prevention (ignore duplicates within 500ms)
    467 |       const timeSinceLastData = currentTime - (lastProcessedTime.current || 0);
  > 468 |       if (timeSinceLastData < 500 && lastProcessedHash.current === dataHash) {
        |                                      ^^^^^^^^^^^^^^^^^
    469 |         console.log('[WebSocket] Duplicate data within 500ms, ignoring...');
    470 |         return;
    471 |       }

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:266:28
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    264 |           const wsname = workstationName || 'WSNAME00';
    265 |           
  > 266 |           webSocketService.registerTerminal(terminalId, username, wsname);
        |                            ^^^^^^^^^^^^^^^^
    267 |         };
    268 |
    269 |         // 터미널 등록 성공 시

ERROR in src/components/AspCliWebTerminal.tsx:825:45
TS2551: Property 'sendMSGSampleBrowserMenuCommand' does not exist on type 'WebSocketService'. Did you mean 'sendMSGSampleBrowserCommand'?
    823 |             try {
    824 |               console.log('[WebSocket] Sending MSGSAMPLEBROWSERMENU command via WebSocket');
  > 825 |               const sent = webSocketService.sendMSGSampleBrowserMenuCommand();
        |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    826 |               if (sent) {
    827 |                 // Add success message to terminal
    828 |                 const wsEntry: CommandHistory = {

ERROR in src/components/AspCliWebTerminal.tsx:852:30
TS2339: Property 'sendTerminalOutput' does not exist on type 'WebSocketService'.
    850 |           // Also send via HTTP for backward compatibility
    851 |           try {
  > 852 |             webSocketService.sendTerminalOutput(output, 'msgsample_browser_output');
        |                              ^^^^^^^^^^^^^^^^^^
    853 |           } catch (wsError) {
    854 |             console.error('Failed to send terminal output via WebSocket:', wsError);
    855 |           }

ERROR in src/components/WorkstationAuthWrapper.tsx:157:24
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    155 |       // 터미널 등록
    156 |       const user = authState.user;
  > 157 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    158 |
    159 |       // 등록 완료 대기
    160 |       await new Promise((resolve, reject) => {

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:266:28
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    264 |           const wsname = workstationName || 'WSNAME00';
    265 |           
  > 266 |           webSocketService.registerTerminal(terminalId, username, wsname);
        |                            ^^^^^^^^^^^^^^^^
    267 |         };
    268 |
    269 |         // 터미널 등록 성공 시

ERROR in src/components/AspCliWebTerminal.tsx:792:51
TS2339: Property 'sendSmedData' does not exist on type 'WebSocketService'.
    790 |                 if (webSocketService.isConnected() && workstationName) {
    791 |                   try {
  > 792 |                     const sent = webSocketService.sendSmedData(workstationName, {
        |                                                   ^^^^^^^^^^^^
    793 |                       map_file: mapFile,
    794 |                       fields: mapData.fields,
    795 |                       program_name: programName,

ERROR in src/components/AspCliWebTerminal.tsx:825:45
TS2551: Property 'sendMSGSampleBrowserMenuCommand' does not exist on type 'WebSocketService'. Did you mean 'sendMSGSampleBrowserCommand'?
    823 |             try {
    824 |               console.log('[WebSocket] Sending MSGSAMPLEBROWSERMENU command via WebSocket');
  > 825 |               const sent = webSocketService.sendMSGSampleBrowserMenuCommand();
        |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    826 |               if (sent) {
    827 |                 // Add success message to terminal
    828 |                 const wsEntry: CommandHistory = {

ERROR in src/components/AspCliWebTerminal.tsx:852:30
TS2339: Property 'sendTerminalOutput' does not exist on type 'WebSocketService'.
    850 |           // Also send via HTTP for backward compatibility
    851 |           try {
  > 852 |             webSocketService.sendTerminalOutput(output, 'msgsample_browser_output');
        |                              ^^^^^^^^^^^^^^^^^^
    853 |           } catch (wsError) {
    854 |             console.error('Failed to send terminal output via WebSocket:', wsError);
    855 |           }

ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAuthWrapper.tsx:116:52
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    114 |       let workstationStatus: WorkstationStatus | null = null;
    115 |       try {
  > 116 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    117 |       } catch (error: any) {
    118 |         if (error.message.includes('404')) {
    119 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:122:36
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    120 |           console.log('Workstation not found, registering new one:', workstationName);
    121 |           try {
  > 122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:123:56
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    121 |           try {
    122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);
    126 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:136:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    134 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    135 |         try {
  > 136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:137:54
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    135 |         try {
    136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);
    140 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:157:24
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    155 |       // 터미널 등록
    156 |       const user = authState.user;
  > 157 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    158 |
    159 |       // 등록 완료 대기
    160 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:266:28
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    264 |           const wsname = workstationName || 'WSNAME00';
    265 |           
  > 266 |           webSocketService.registerTerminal(terminalId, username, wsname);
        |                            ^^^^^^^^^^^^^^^^
    267 |         };
    268 |
    269 |         // 터미널 등록 성공 시

ERROR in src/components/AspCliWebTerminal.tsx:792:51
TS2339: Property 'sendSmedData' does not exist on type 'WebSocketService'.
    790 |                 if (webSocketService.isConnected() && workstationName) {
    791 |                   try {
  > 792 |                     const sent = webSocketService.sendSmedData(workstationName, {
        |                                                   ^^^^^^^^^^^^
    793 |                       map_file: mapFile,
    794 |                       fields: mapData.fields,
    795 |                       program_name: programName,

ERROR in src/components/AspCliWebTerminal.tsx:825:45
TS2551: Property 'sendMSGSampleBrowserMenuCommand' does not exist on type 'WebSocketService'. Did you mean 'sendMSGSampleBrowserCommand'?
    823 |             try {
    824 |               console.log('[WebSocket] Sending MSGSAMPLEBROWSERMENU command via WebSocket');
  > 825 |               const sent = webSocketService.sendMSGSampleBrowserMenuCommand();
        |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    826 |               if (sent) {
    827 |                 // Add success message to terminal
    828 |                 const wsEntry: CommandHistory = {

ERROR in src/components/AspCliWebTerminal.tsx:852:30
TS2339: Property 'sendTerminalOutput' does not exist on type 'WebSocketService'.
    850 |           // Also send via HTTP for backward compatibility
    851 |           try {
  > 852 |             webSocketService.sendTerminalOutput(output, 'msgsample_browser_output');
        |                              ^^^^^^^^^^^^^^^^^^
    853 |           } catch (wsError) {
    854 |             console.error('Failed to send terminal output via WebSocket:', wsError);
    855 |           }

ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAuthWrapper.tsx:116:52
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    114 |       let workstationStatus: WorkstationStatus | null = null;
    115 |       try {
  > 116 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    117 |       } catch (error: any) {
    118 |         if (error.message.includes('404')) {
    119 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:122:36
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    120 |           console.log('Workstation not found, registering new one:', workstationName);
    121 |           try {
  > 122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:123:56
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    121 |           try {
    122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);
    126 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:136:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    134 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    135 |         try {
  > 136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:137:54
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    135 |         try {
    136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);
    140 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:157:24
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    155 |       // 터미널 등록
    156 |       const user = authState.user;
  > 157 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    158 |
    159 |       // 등록 완료 대기
    160 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
ERROR in src/components/AspCliWebTerminal.tsx:266:28
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    264 |           const username = systemInfo.currentUser || user || 'admin';
    265 |           const wsname = workstationName || 'WSNAME00';
  > 266 |           
        |           ^^^^^^^^^^^^^^^^
    267 |           webSocketService.registerWithHub(terminalId, username, wsname);
    268 |           
    269 |           // Hub 연결 성공 메시지

ERROR in src/components/AspCliWebTerminal.tsx:792:51
TS2339: Property 'sendSmedData' does not exist on type 'WebSocketService'.
    790 |     try {
    791 |       // Extract filename from command
  > 792 |       const fileMatch = command.match(/FILE\(([^/]+)\/([^)]+)\)/i);
        |                                                   ^^^^^^^^^^^^
    793 |       if (!fileMatch) return null;
    794 |       
    795 |       const [, library, filename] = fileMatch;

ERROR in src/components/AspCliWebTerminal.tsx:825:45
TS2551: Property 'sendMSGSampleBrowserMenuCommand' does not exist on type 'WebSocketService'. Did you mean 'sendMSGSampleBrowserCommand'?
    823 |           const recordData = recordMatch[2]; // Use exactly as server sent - no parsing or trimming
    824 |           
  > 825 |           console.log(`[DEBUG] React: Found record ${recordNum}`);
        |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    826 |           console.log(`[DEBUG] React: Record data: ${recordData}`);
    827 |           console.log(`[DEBUG] React: Record data length: ${recordData.length}`);
    828 |           

ERROR in src/components/AspCliWebTerminal.tsx:852:30
TS2339: Property 'sendTerminalOutput' does not exist on type 'WebSocketService'.
    850 |               const hexMatches = hexPart.match(/[0-9A-F]{2}/g);
    851 |               if (hexMatches) {
  > 852 |                 hexBytes.push(...hexMatches.map(h => parseInt(h, 16)));
        |                              ^^^^^^^^^^^^^^^^^^
    853 |               }
    854 |             } else if (foundHexSection && hexLine.match(/^\s*[0-9A-F]{2}(\s+[0-9A-F]{2})*\s*$/)) {
    855 |               // Line with only hex values (continuation of HEX data)

ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAuthWrapper.tsx:116:52
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    114 |       let workstationStatus: WorkstationStatus | null = null;
    115 |       try {
  > 116 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    117 |       } catch (error: any) {
    118 |         if (error.message.includes('404')) {
    119 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:122:36
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    120 |           console.log('Workstation not found, registering new one:', workstationName);
    121 |           try {
  > 122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:123:56
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    121 |           try {
    122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);
    126 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:136:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    134 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    135 |         try {
  > 136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:137:54
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    135 |         try {
    136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);
    140 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:157:24
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    155 |       // 터미널 등록
    156 |       const user = authState.user;
  > 157 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    158 |
    159 |       // 등록 완료 대기
    160 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:678:51
TS2339: Property 'sendSmedData' does not exist on type 'WebSocketService'.
    676 |                 if (webSocketService.isConnected() && workstationName) {
    677 |                   try {
  > 678 |                     const sent = webSocketService.sendSmedData(workstationName, {
        |                                                   ^^^^^^^^^^^^
    679 |                       map_file: mapFile,
    680 |                       fields: mapData.fields,
    681 |                       program_name: programName,

ERROR in src/components/AspCliWebTerminal.tsx:711:45
TS2551: Property 'sendMSGSampleBrowserMenuCommand' does not exist on type 'WebSocketService'. Did you mean 'sendMSGSampleBrowserCommand'?
    709 |             try {
    710 |               console.log('[WebSocket] Sending MSGSAMPLEBROWSERMENU command via WebSocket');
  > 711 |               const sent = webSocketService.sendMSGSampleBrowserMenuCommand();
        |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    712 |               if (sent) {
    713 |                 // Add success message to terminal
    714 |                 const wsEntry: CommandHistory = {

ERROR in src/components/AspCliWebTerminal.tsx:738:30
TS2339: Property 'sendTerminalOutput' does not exist on type 'WebSocketService'.
    736 |           // Also send via HTTP for backward compatibility
    737 |           try {
  > 738 |             webSocketService.sendTerminalOutput(output, 'msgsample_browser_output');
        |                              ^^^^^^^^^^^^^^^^^^
    739 |           } catch (wsError) {
    740 |             console.error('Failed to send terminal output via WebSocket:', wsError);
    741 |           }

ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAuthWrapper.tsx:116:52
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    114 |       let workstationStatus: WorkstationStatus | null = null;
    115 |       try {
  > 116 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    117 |       } catch (error: any) {
    118 |         if (error.message.includes('404')) {
    119 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:122:36
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    120 |           console.log('Workstation not found, registering new one:', workstationName);
    121 |           try {
  > 122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:123:56
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    121 |           try {
    122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);
    126 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:136:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    134 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    135 |         try {
  > 136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:137:54
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    135 |         try {
    136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);
    140 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:157:24
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    155 |       // 터미널 등록
    156 |       const user = authState.user;
  > 157 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    158 |
    159 |       // 등록 완료 대기
    160 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:678:51
TS2339: Property 'sendSmedData' does not exist on type 'WebSocketService'.
    676 |                 if (webSocketService.isConnected() && workstationName) {
    677 |                   try {
  > 678 |                     const sent = webSocketService.sendSmedData(workstationName, {
        |                                                   ^^^^^^^^^^^^
    679 |                       map_file: mapFile,
    680 |                       fields: mapData.fields,
    681 |                       program_name: programName,

ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAuthWrapper.tsx:116:52
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    114 |       let workstationStatus: WorkstationStatus | null = null;
    115 |       try {
  > 116 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    117 |       } catch (error: any) {
    118 |         if (error.message.includes('404')) {
    119 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:122:36
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    120 |           console.log('Workstation not found, registering new one:', workstationName);
    121 |           try {
  > 122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:123:56
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    121 |           try {
    122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);
    126 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:136:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    134 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    135 |         try {
  > 136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:137:54
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    135 |         try {
    136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);
    140 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:157:24
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    155 |       // 터미널 등록
    156 |       const user = authState.user;
  > 157 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    158 |
    159 |       // 등록 완료 대기
    160 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:678:51
TS2339: Property 'sendSmedData' does not exist on type 'WebSocketService'.
    676 |                 if (webSocketService.isConnected() && workstationName) {
    677 |                   try {
  > 678 |                     const sent = webSocketService.sendSmedData(workstationName, {
        |                                                   ^^^^^^^^^^^^
    679 |                       map_file: mapFile,
    680 |                       fields: mapData.fields,
    681 |                       program_name: programName,

ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAuthWrapper.tsx:116:52
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    114 |       let workstationStatus: WorkstationStatus | null = null;
    115 |       try {
  > 116 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    117 |       } catch (error: any) {
    118 |         if (error.message.includes('404')) {
    119 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:122:36
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    120 |           console.log('Workstation not found, registering new one:', workstationName);
    121 |           try {
  > 122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:123:56
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    121 |           try {
    122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);
    126 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:136:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    134 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    135 |         try {
  > 136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:137:54
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    135 |         try {
    136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);
    140 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:157:24
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    155 |       // 터미널 등록
    156 |       const user = authState.user;
  > 157 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    158 |
    159 |       // 등록 완료 대기
    160 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:678:51
TS2339: Property 'sendSmedData' does not exist on type 'WebSocketService'.
    676 |                 if (webSocketService.isConnected() && workstationName) {
    677 |                   try {
  > 678 |                     const sent = webSocketService.sendSmedData(workstationName, {
        |                                                   ^^^^^^^^^^^^
    679 |                       map_file: mapFile,
    680 |                       fields: mapData.fields,
    681 |                       program_name: programName,

ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAuthWrapper.tsx:116:52
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    114 |       let workstationStatus: WorkstationStatus | null = null;
    115 |       try {
  > 116 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    117 |       } catch (error: any) {
    118 |         if (error.message.includes('404')) {
    119 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:122:36
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    120 |           console.log('Workstation not found, registering new one:', workstationName);
    121 |           try {
  > 122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:123:56
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    121 |           try {
    122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);
    126 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:136:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    134 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    135 |         try {
  > 136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:137:54
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    135 |         try {
    136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);
    140 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:157:24
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    155 |       // 터미널 등록
    156 |       const user = authState.user;
  > 157 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    158 |
    159 |       // 등록 완료 대기
    160 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:678:51
TS2339: Property 'sendSmedData' does not exist on type 'WebSocketService'.
    676 |                 if (webSocketService.isConnected() && workstationName) {
    677 |                   try {
  > 678 |                     const sent = webSocketService.sendSmedData(workstationName, {
        |                                                   ^^^^^^^^^^^^
    679 |                       map_file: mapFile,
    680 |                       fields: mapData.fields,
    681 |                       program_name: programName,

ERROR in src/components/WorkstationAdmin.tsx:38:47
TS2339: Property 'listWorkstations' does not exist on type 'WebSocketService'.
    36 |       setLoading(true);
    37 |       setError('');
  > 38 |       const response = await webSocketService.listWorkstations();
       |                                               ^^^^^^^^^^^^^^^^
    39 |       setWorkstations(response.workstations || []);
    40 |     } catch (err) {
    41 |       setError('Failed to fetch workstations. Please check server connection.');

ERROR in src/components/WorkstationAdmin.tsx:54:30
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    52 |     try {
    53 |       setProcessingActions(prev => new Set(prev).add('add'));
  > 54 |       await webSocketService.registerWorkstation(newWsname, 'OFF');
       |                              ^^^^^^^^^^^^^^^^^^^
    55 |       setNewWsname('');
    56 |       setShowAddForm(false);
    57 |       await fetchWorkstations();

ERROR in src/components/WorkstationAdmin.tsx:76:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    74 |     try {
    75 |       setProcessingActions(prev => new Set(prev).add(wsname));
  > 76 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    77 |       await fetchWorkstations();
    78 |     } catch (err) {
    79 |       setError(`Failed to ${newStatus === 'ON' ? 'enable' : 'disable'} workstation ${wsname}`);

ERROR in src/components/WorkstationAuthWrapper.tsx:116:52
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    114 |       let workstationStatus: WorkstationStatus | null = null;
    115 |       try {
  > 116 |         workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                    ^^^^^^^^^^^^^^^^^^^^
    117 |       } catch (error: any) {
    118 |         if (error.message.includes('404')) {
    119 |           // Workstation이 존재하지 않으면 자동 등록

ERROR in src/components/WorkstationAuthWrapper.tsx:122:36
TS2551: Property 'registerWorkstation' does not exist on type 'WebSocketService'. Did you mean 'registerWorkstationViaHub'?
    120 |           console.log('Workstation not found, registering new one:', workstationName);
    121 |           try {
  > 122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
        |                                    ^^^^^^^^^^^^^^^^^^^
    123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);

ERROR in src/components/WorkstationAuthWrapper.tsx:123:56
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    121 |           try {
    122 |             await webSocketService.registerWorkstation(workstationName, 'ON');
  > 123 |             workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                        ^^^^^^^^^^^^^^^^^^^^
    124 |           } catch (regError) {
    125 |             console.error('Failed to register workstation:', regError);
    126 |             throw new Error('Failed to register new workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:136:34
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    134 |       if (workstationStatus && workstationStatus.status === 'OFF') {
    135 |         try {
  > 136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
        |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);

ERROR in src/components/WorkstationAuthWrapper.tsx:137:54
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    135 |         try {
    136 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 137 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |                                                      ^^^^^^^^^^^^^^^^^^^^
    138 |         } catch (updateError) {
    139 |           console.error('Failed to enable workstation:', updateError);
    140 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:157:24
TS2339: Property 'registerTerminal' does not exist on type 'WebSocketService'.
    155 |       // 터미널 등록
    156 |       const user = authState.user;
  > 157 |       webSocketService.registerTerminal('webui', user, workstationName);
        |                        ^^^^^^^^^^^^^^^^
    158 |
    159 |       // 등록 완료 대기
    160 |       await new Promise((resolve, reject) => {

ERROR in src/components/WorkstationQuickToggle.tsx:46:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    44 |   const fetchStatus = useCallback(async () => {
    45 |     try {
  > 46 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    47 |       setStatus(response);
    48 |       setError('');
    49 |     } catch (err) {

ERROR in src/components/WorkstationQuickToggle.tsx:64:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    62 |
    63 |     try {
  > 64 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    65 |       await fetchStatus();
    66 |       
    67 |       if (onStatusChange) {

ERROR in src/components/WorkstationStatusCard.tsx:40:47
TS2551: Property 'getWorkstationStatus' does not exist on type 'WebSocketService'. Did you mean 'getWorkstationName'?
    38 |     try {
    39 |       setLoading(true);
  > 40 |       const response = await webSocketService.getWorkstationStatus(wsname);
       |                                               ^^^^^^^^^^^^^^^^^^^^
    41 |       setStatus(response);
    42 |       setError('');
    43 |     } catch (err) {

ERROR in src/components/WorkstationStatusCard.tsx:61:30
TS2339: Property 'updateWorkstationStatus' does not exist on type 'WebSocketService'.
    59 |
    60 |     try {
  > 61 |       await webSocketService.updateWorkstationStatus(wsname, newStatus);
       |                              ^^^^^^^^^^^^^^^^^^^^^^^
    62 |       await fetchStatus();
    63 |     } catch (err) {
    64 |       console.error('Error toggling workstation status:', err);

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:382:29
TS2304: Cannot find name 'convertFieldsToSmedFormat'.
    380 |         if (data.fields && typeof data.fields === 'object' && !Array.isArray(data.fields)) {
    381 |           console.log('[WebSocket Hub] Converting fields object to SMED format');
  > 382 |           processedFields = convertFieldsToSmedFormat(data.fields);
        |                             ^^^^^^^^^^^^^^^^^^^^^^^^^
    383 |           
    384 |           if (processedFields.length === 0) {
    385 |             console.error('[WebSocket Hub] Failed to convert fields');

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/websocketService.ts:162:33
TS2345: Argument of type '{ action: string; hub_version: string; data_flow_type: string; map_file: any; fields: any; program_name: any; session_id: any; metadata: { timestamp: string; source: string; terminal_id: any; wsname: string; }; }' is not assignable to parameter of type 'SmedDataDirectEvent'.
  Types of property 'action' are incompatible.
    Type 'string' is not assignable to type '"smed_data_direct"'.
    160 |         }
    161 |       };
  > 162 |       this.handleSmedDataDirect(convertedData);
        |                                 ^^^^^^^^^^^^^
    163 |     });
    164 |     
    165 |     // Command confirmation 이벤트 처리

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/websocketService.ts:162:33
TS2345: Argument of type '{ action: string; hub_version: string; data_flow_type: string; map_file: any; fields: any; program_name: any; session_id: any; metadata: { timestamp: string; source: string; terminal_id: any; wsname: string; }; }' is not assignable to parameter of type 'SmedDataDirectEvent'.
  Types of property 'action' are incompatible.
    Type 'string' is not assignable to type '"smed_data_direct"'.
    160 |         }
    161 |       };
  > 162 |       this.handleSmedDataDirect(convertedData);
        |                                 ^^^^^^^^^^^^^
    163 |     });
    164 |     
    165 |     // Command confirmation 이벤트 처리

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/websocketService.ts:162:33
TS2345: Argument of type '{ action: string; hub_version: string; data_flow_type: string; map_file: any; fields: any; program_name: any; session_id: any; metadata: { timestamp: string; source: string; terminal_id: any; wsname: string; }; }' is not assignable to parameter of type 'SmedDataDirectEvent'.
  Types of property 'action' are incompatible.
    Type 'string' is not assignable to type '"smed_data_direct"'.
    160 |         }
    161 |       };
  > 162 |       this.handleSmedDataDirect(convertedData);
        |                                 ^^^^^^^^^^^^^
    163 |     });
    164 |     
    165 |     // Command confirmation 이벤트 처리

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/websocketService.ts:157:11
TS2322: Type '"api_server"' is not assignable to type '"websocket_hub"'.
    155 |         metadata: {
    156 |           timestamp: new Date().toISOString(),
  > 157 |           source: 'api_server' as const,
        |           ^^^^^^
    158 |           terminal_id: data.terminal_id,
    159 |           wsname: 'WSNAME00'
    160 |         }

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAuthWrapper.tsx:123:11
TS2304: Cannot find name 'workstationStatus'.
    121 |
    122 |       // Workstation이 비활성화되어 있으면 활성화
  > 123 |       if (workstationStatus && workstationStatus.status === 'OFF') {
        |           ^^^^^^^^^^^^^^^^^
    124 |         try {
    125 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
    126 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);

ERROR in src/components/WorkstationAuthWrapper.tsx:123:32
TS2304: Cannot find name 'workstationStatus'.
    121 |
    122 |       // Workstation이 비활성화되어 있으면 활성화
  > 123 |       if (workstationStatus && workstationStatus.status === 'OFF') {
        |                                ^^^^^^^^^^^^^^^^^
    124 |         try {
    125 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
    126 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);

ERROR in src/components/WorkstationAuthWrapper.tsx:126:11
TS2304: Cannot find name 'workstationStatus'.
    124 |         try {
    125 |           await webSocketService.updateWorkstationStatus(workstationName, 'ON');
  > 126 |           workstationStatus = await webSocketService.getWorkstationStatus(workstationName);
        |           ^^^^^^^^^^^^^^^^^
    127 |         } catch (updateError) {
    128 |           console.error('Failed to enable workstation:', updateError);
    129 |           throw new Error('Failed to enable workstation');

ERROR in src/components/WorkstationAuthWrapper.tsx:176:17
TS2304: Cannot find name 'workstationStatus'.
    174 |         isAuthenticated: true,
    175 |         wsname: workstationName,
  > 176 |         status: workstationStatus,
        |                 ^^^^^^^^^^^^^^^^^
    177 |         user: user
    178 |       };
    179 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAuthWrapper.tsx:168:17
TS2304: Cannot find name 'workstationStatus'.
    166 |         isAuthenticated: true,
    167 |         wsname: workstationName,
  > 168 |         status: workstationStatus,
        |                 ^^^^^^^^^^^^^^^^^
    169 |         user: user
    170 |       };
    171 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAuthWrapper.tsx:168:17
TS2304: Cannot find name 'workstationStatus'.
    166 |         isAuthenticated: true,
    167 |         wsname: workstationName,
  > 168 |         status: workstationStatus,
        |                 ^^^^^^^^^^^^^^^^^
    169 |         user: user
    170 |       };
    171 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAuthWrapper.tsx:159:17
TS2304: Cannot find name 'workstationStatus'.
    157 |         isAuthenticated: true,
    158 |         wsname: workstationName,
  > 159 |         status: workstationStatus,
        |                 ^^^^^^^^^^^^^^^^^
    160 |         user: user
    161 |       };
    162 |

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WorkstationAuthWrapper.tsx:159:17
TS2304: Cannot find name 'workstationStatus'.
    157 |         isAuthenticated: true,
    158 |         wsname: workstationName,
  > 159 |         status: workstationStatus,
        |                 ^^^^^^^^^^^^^^^^^
    160 |         user: user
    161 |       };
    162 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAuthWrapper.tsx:162:17
TS2304: Cannot find name 'workstationStatus'.
    160 |         isAuthenticated: true,
    161 |         wsname: workstationName,
  > 162 |         status: workstationStatus,
        |                 ^^^^^^^^^^^^^^^^^
    163 |         user: user
    164 |       };
    165 |

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/WorkstationAuthWrapper.tsx:141:17
TS2304: Cannot find name 'workstationStatus'.
    139 |         isAuthenticated: true,
    140 |         wsname: workstationName,
  > 141 |         status: workstationStatus,
        |                 ^^^^^^^^^^^^^^^^^
    142 |         user: user
    143 |       };
    144 |

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/GroupMovementManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager, SelectionBounds } from './FieldSelectionManager';
    10 |
    11 | export interface GroupMovementConfig {

ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/GroupMovementManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager, SelectionBounds } from './FieldSelectionManager';
    10 |
    11 | export interface GroupMovementConfig {

ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/GroupMovementManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager, SelectionBounds } from './FieldSelectionManager';
    10 |
    11 | export interface GroupMovementConfig {

ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AdvancedFieldRenderer.tsx:9:10
TS2614: Module '"./ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "./ASPMapEditor"' instead?
     7 |
     8 | import React, { useMemo } from 'react';
  >  9 | import { Field } from './ASPMapEditor';
       |          ^^^^^
    10 | import { SelectionState } from '../utils/FieldSelectionManager';
    11 | import { DragState } from '../utils/MouseInteractionHandler';
    12 | import './AdvancedFieldRenderer.css';

ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/GroupMovementManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager, SelectionBounds } from './FieldSelectionManager';
    10 |
    11 | export interface GroupMovementConfig {

ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AdvancedFieldRenderer.tsx:9:10
TS2614: Module '"./ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "./ASPMapEditor"' instead?
     7 |
     8 | import React, { useMemo } from 'react';
  >  9 | import { Field } from './ASPMapEditor';
       |          ^^^^^
    10 | import { SelectionState } from '../utils/FieldSelectionManager';
    11 | import { DragState } from '../utils/MouseInteractionHandler';
    12 | import './AdvancedFieldRenderer.css';

ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/GroupMovementManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager, SelectionBounds } from './FieldSelectionManager';
    10 |
    11 | export interface GroupMovementConfig {

ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AdvancedFieldRenderer.tsx:9:10
TS2614: Module '"./ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "./ASPMapEditor"' instead?
     7 |
     8 | import React, { useMemo } from 'react';
  >  9 | import { Field } from './ASPMapEditor';
       |          ^^^^^
    10 | import { SelectionState } from '../utils/FieldSelectionManager';
    11 | import { DragState } from '../utils/MouseInteractionHandler';
    12 | import './AdvancedFieldRenderer.css';

ERROR in src/components/ASPMapEditorEnhanced.tsx:157:7
TS2345: Argument of type 'RefObject<HTMLDivElement | null>' is not assignable to parameter of type 'RefObject<HTMLDivElement>'.
  Type 'HTMLDivElement | null' is not assignable to type 'HTMLDivElement'.
    Type 'null' is not assignable to type 'HTMLDivElement'.
    155 |       (updatedFields) => setFields(updatedFields),
    156 |       setStatusMessage,
  > 157 |       screenPanelRef
        |       ^^^^^^^^^^^^^^
    158 |     );
    159 |   }, [selectionManager, charWidth, charHeight]);
    160 |   

ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/GroupMovementManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager, SelectionBounds } from './FieldSelectionManager';
    10 |
    11 | export interface GroupMovementConfig {

ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AdvancedFieldRenderer.tsx:9:10
TS2614: Module '"./ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "./ASPMapEditor"' instead?
     7 |
     8 | import React, { useMemo } from 'react';
  >  9 | import { Field } from './ASPMapEditor';
       |          ^^^^^
    10 | import { SelectionState } from '../utils/FieldSelectionManager';
    11 | import { DragState } from '../utils/MouseInteractionHandler';
    12 | import './AdvancedFieldRenderer.css';

ERROR in src/components/ASPMapEditorEnhanced.tsx:157:7
TS2345: Argument of type 'RefObject<HTMLDivElement | null>' is not assignable to parameter of type 'RefObject<HTMLDivElement>'.
  Type 'HTMLDivElement | null' is not assignable to type 'HTMLDivElement'.
    Type 'null' is not assignable to type 'HTMLDivElement'.
    155 |       (updatedFields) => setFields(updatedFields),
    156 |       setStatusMessage,
  > 157 |       screenPanelRef
        |       ^^^^^^^^^^^^^^
    158 |     );
    159 |   }, [selectionManager, charWidth, charHeight]);
    160 |   

ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/GroupMovementManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager, SelectionBounds } from './FieldSelectionManager';
    10 |
    11 | export interface GroupMovementConfig {

ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AdvancedFieldRenderer.tsx:9:10
TS2614: Module '"./ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "./ASPMapEditor"' instead?
     7 |
     8 | import React, { useMemo } from 'react';
  >  9 | import { Field } from './ASPMapEditor';
       |          ^^^^^
    10 | import { SelectionState } from '../utils/FieldSelectionManager';
    11 | import { DragState } from '../utils/MouseInteractionHandler';
    12 | import './AdvancedFieldRenderer.css';

ERROR in src/components/ASPMapEditorEnhanced.tsx:157:7
TS2345: Argument of type 'RefObject<HTMLDivElement | null>' is not assignable to parameter of type 'RefObject<HTMLDivElement>'.
  Type 'HTMLDivElement | null' is not assignable to type 'HTMLDivElement'.
    Type 'null' is not assignable to type 'HTMLDivElement'.
    155 |       (updatedFields) => setFields(updatedFields),
    156 |       setStatusMessage,
  > 157 |       screenPanelRef
        |       ^^^^^^^^^^^^^^
    158 |     );
    159 |   }, [selectionManager, charWidth, charHeight]);
    160 |   

ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/GroupMovementManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager, SelectionBounds } from './FieldSelectionManager';
    10 |
    11 | export interface GroupMovementConfig {

ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AdvancedFieldRenderer.tsx:9:10
TS2614: Module '"./ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "./ASPMapEditor"' instead?
     7 |
     8 | import React, { useMemo } from 'react';
  >  9 | import { Field } from './ASPMapEditor';
       |          ^^^^^
    10 | import { SelectionState } from '../utils/FieldSelectionManager';
    11 | import { DragState } from '../utils/MouseInteractionHandler';
    12 | import './AdvancedFieldRenderer.css';

ERROR in src/components/ASPMapEditorEnhanced.tsx:157:7
TS2345: Argument of type 'RefObject<HTMLDivElement | null>' is not assignable to parameter of type 'RefObject<HTMLDivElement>'.
  Type 'HTMLDivElement | null' is not assignable to type 'HTMLDivElement'.
    Type 'null' is not assignable to type 'HTMLDivElement'.
    155 |       (updatedFields) => setFields(updatedFields),
    156 |       setStatusMessage,
  > 157 |       screenPanelRef
        |       ^^^^^^^^^^^^^^
    158 |     );
    159 |   }, [selectionManager, charWidth, charHeight]);
    160 |   

ERROR in src/utils/FieldSelectionManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 |
    10 | export interface SelectionState {
    11 |   /** Currently focused/primary selected field */

ERROR in src/utils/GroupMovementManager.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager, SelectionBounds } from './FieldSelectionManager';
    10 |
    11 | export interface GroupMovementConfig {

ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/KeyboardInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface KeyboardConfig {

ERROR in src/utils/MouseInteractionHandler.ts:8:10
TS2614: Module '"../components/ASPMapEditor"' has no exported member 'Field'. Did you mean to use 'import Field from "../components/ASPMapEditor"' instead?
     6 |  */
     7 |
  >  8 | import { Field } from '../components/ASPMapEditor';
       |          ^^^^^
     9 | import { FieldSelectionManager } from './FieldSelectionManager';
    10 |
    11 | export interface MouseConfig {

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/ASPMapEditorEnhanced.tsx:157:7
TS2345: Argument of type 'RefObject<HTMLDivElement | null>' is not assignable to parameter of type 'RefObject<HTMLDivElement>'.
  Type 'HTMLDivElement | null' is not assignable to type 'HTMLDivElement'.
    Type 'null' is not assignable to type 'HTMLDivElement'.
    155 |       (updatedFields) => setFields(updatedFields),
    156 |       setStatusMessage,
  > 157 |       screenPanelRef
        |       ^^^^^^^^^^^^^^
    158 |     );
    159 |   }, [selectionManager, charWidth, charHeight]);
    160 |   

ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/utils/GroupMovementManager.ts:233:36
TS2802: Type 'Map<string, Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    231 |     
    232 |     // Add all non-selected fields to avoid list
  > 233 |     for (const [fieldId, field] of this.fields) {
        |                                    ^^^^^^^^^^^
    234 |       if (!selectedIds.has(fieldId)) {
    235 |         avoidFields.add(fieldId);
    236 |       }

ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/utils/GroupMovementManager.ts:313:32
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    311 |     const collisions: string[] = [];
    312 |
  > 313 |     for (const avoidFieldId of avoidFields) {
        |                                ^^^^^^^^^^^
    314 |       const avoidField = this.fields.get(avoidFieldId);
    315 |       if (!avoidField) continue;
    316 |

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/GroupMovementManager.ts:329:5
TS1005: ',' expected.
    327 |     }
    328 |
  > 329 |     return collisions;
        |     ^^^^^^
    330 |   }
    331 |
    332 |   /**

ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/MouseInteractionHandler.ts:301:27
TS2802: Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    299 |     let allWithinBounds = true;
    300 |
  > 301 |     for (const fieldId of this.dragState.participatingFields) {
        |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 |       const field = this.fields.get(fieldId);
    303 |       if (!field) continue;
    304 |

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/MouseInteractionHandler.ts:320:5
TS1005: ',' expected.
    318 |     }
    319 |
  > 320 |     this.dragState.previewPositions = newPreviewPositions;
        |     ^^^^
    321 |     this.dragState.currentPosition = { x: event.clientX, y: event.clientY };
    322 |
    323 |     // Update status message based on bounds check

ERROR in src/utils/MouseInteractionHandler.ts:320:58
TS1005: ')' expected.
    318 |     }
    319 |
  > 320 |     this.dragState.previewPositions = newPreviewPositions;
        |                                                          ^
    321 |     this.dragState.currentPosition = { x: event.clientX, y: event.clientY };
    322 |
    323 |     // Update status message based on bounds check

ERROR in src/utils/MouseInteractionHandler.ts:357:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    355 |
    356 |     // Apply preview positions to actual fields
  > 357 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    358 |       const field = this.fields.get(fieldId);
    359 |       if (!field) continue;
    360 |

ERROR in src/utils/MouseInteractionHandler.ts:441:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    439 |
    440 |     // Find field that encompasses this position
  > 441 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    442 |       if (gridX >= field.x && gridX < field.x + field.width &&
    443 |           gridY >= field.y && gridY < field.y + field.height) {
    444 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/MouseInteractionHandler.ts:359:41
TS2802: Type 'Map<string, { x: number; y: number; }>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    357 |
    358 |     // Apply preview positions to actual fields
  > 359 |     for (const [fieldId, previewPos] of this.dragState.previewPositions) {
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    360 |       const field = this.fields.get(fieldId);
    361 |       if (!field) continue;
    362 |

ERROR in src/utils/MouseInteractionHandler.ts:443:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    441 |
    442 |     // Find field that encompasses this position
  > 443 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    444 |       if (gridX >= field.x && gridX < field.x + field.width &&
    445 |           gridY >= field.y && gridY < field.y + field.height) {
    446 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/utils/MouseInteractionHandler.ts:443:25
TS2802: Type 'IterableIterator<Field>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    441 |
    442 |     // Find field that encompasses this position
  > 443 |     for (const field of this.fields.values()) {
        |                         ^^^^^^^^^^^^^^^^^^^^
    444 |       if (gridX >= field.x && gridX < field.x + field.width &&
    445 |           gridY >= field.y && gridY < field.y + field.height) {
    446 |         return field;

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:574:11
TS2552: Cannot find name 'websocketService'. Did you mean 'webSocketService'?
    572 |       
    573 |       // Use WebSocket Hub for command execution if connected
  > 574 |       if (websocketService.isConnected()) {
        |           ^^^^^^^^^^^^^^^^
    575 |         console.log('[ASP Terminal] Sending command via WebSocket Hub:', command);
    576 |         
    577 |         // Send command via WebSocket

ERROR in src/components/AspCliWebTerminal.tsx:578:9
TS2552: Cannot find name 'websocketService'. Did you mean 'webSocketService'?
    576 |         
    577 |         // Send command via WebSocket
  > 578 |         websocketService.emit('hub_command', {
        |         ^^^^^^^^^^^^^^^^
    579 |           command: command.trim(),
    580 |           terminal_id: terminalId,
    581 |           user: systemInfo.currentUser,

ERROR in src/components/AspCliWebTerminal.tsx:580:24
TS2304: Cannot find name 'terminalId'.
    578 |         websocketService.emit('hub_command', {
    579 |           command: command.trim(),
  > 580 |           terminal_id: terminalId,
        |                        ^^^^^^^^^^
    581 |           user: systemInfo.currentUser,
    582 |           wsname: wsname
    583 |         });

ERROR in src/components/AspCliWebTerminal.tsx:582:19
TS2552: Cannot find name 'wsname'. Did you mean 'name'?
    580 |           terminal_id: terminalId,
    581 |           user: systemInfo.currentUser,
  > 582 |           wsname: wsname
        |                   ^^^^^^
    583 |         });
    584 |         
    585 |         // Wait for command confirmation

ERROR in src/components/AspCliWebTerminal.tsx:593:13
TS2552: Cannot find name 'websocketService'. Did you mean 'webSocketService'?
    591 |           const handleConfirmation = (data: any) => {
    592 |             clearTimeout(timeout);
  > 593 |             websocketService.off('command_confirmation', handleConfirmation);
        |             ^^^^^^^^^^^^^^^^
    594 |             resolve(data);
    595 |           };
    596 |           

ERROR in src/components/AspCliWebTerminal.tsx:597:11
TS2552: Cannot find name 'websocketService'. Did you mean 'webSocketService'?
    595 |           };
    596 |           
  > 597 |           websocketService.on('command_confirmation', handleConfirmation);
        |           ^^^^^^^^^^^^^^^^
    598 |         });
    599 |         
    600 |         const result = await confirmationPromise;

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:578:26
TS2341: Property 'emit' is private and only accessible within class 'WebSocketService'.
    576 |         
    577 |         // Send command via WebSocket
  > 578 |         webSocketService.emit('hub_command', {
        |                          ^^^^
    579 |           command: command.trim(),
    580 |           terminal_id: terminalId,
    581 |           user: systemInfo.currentUser,

ERROR in src/components/AspCliWebTerminal.tsx:580:24
TS2304: Cannot find name 'terminalId'.
    578 |         webSocketService.emit('hub_command', {
    579 |           command: command.trim(),
  > 580 |           terminal_id: terminalId,
        |                        ^^^^^^^^^^
    581 |           user: systemInfo.currentUser,
    582 |           wsname: wsname
    583 |         });

ERROR in src/components/AspCliWebTerminal.tsx:582:19
TS2552: Cannot find name 'wsname'. Did you mean 'name'?
    580 |           terminal_id: terminalId,
    581 |           user: systemInfo.currentUser,
  > 582 |           wsname: wsname
        |                   ^^^^^^
    583 |         });
    584 |         
    585 |         // Wait for command confirmation

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:578:26
TS2341: Property 'emit' is private and only accessible within class 'WebSocketService'.
    576 |         
    577 |         // Send command via WebSocket
  > 578 |         webSocketService.emit('hub_command', {
        |                          ^^^^
    579 |           command: command.trim(),
    580 |           terminal_id: 'webui',
    581 |           user: systemInfo.currentUser,

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:602:48
TS2339: Property 'isRegistered' does not exist on type 'WebSocketService'.
    600 |       
    601 |       // Check if Hub is registered by asking webSocketService directly
  > 602 |       const isHubRegistered = webSocketService.isRegistered();
        |                                                ^^^^^^^^^^^^
    603 |       console.log('[ASP Terminal] DEBUG - webSocketService.isRegistered():', isHubRegistered);
    604 |       console.log('[ASP Terminal] DEBUG - Hub check result:', webSocketService.isConnected() && isHubRegistered);
    605 |       

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:602:48
TS2339: Property 'isTerminalRegistered' does not exist on type 'WebSocketService'.
    600 |       
    601 |       // Check if Hub is registered by asking webSocketService directly
  > 602 |       const isHubRegistered = webSocketService.isTerminalRegistered();
        |                                                ^^^^^^^^^^^^^^^^^^^^
    603 |       console.log('[ASP Terminal] DEBUG - webSocketService.isTerminalRegistered():', isHubRegistered);
    604 |       console.log('[ASP Terminal] DEBUG - Hub check result:', webSocketService.isConnected() && isHubRegistered);
    605 |       

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:415:31
TS2304: Cannot find name 'convertMenuFieldsToSmedFormat'.
    413 |           if (actualFields && typeof actualFields === 'object') {
    414 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
  > 415 |             processedFields = convertMenuFieldsToSmedFormat(actualFields, data.map_file);
        |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    416 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
    417 |           } else {
    418 |             console.log('[WebSocket Hub] No valid fields found');

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:451:31
TS2304: Cannot find name 'convertMenuFieldsToSmedFormat'.
    449 |           if (actualFields && typeof actualFields === 'object') {
    450 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
  > 451 |             processedFields = convertMenuFieldsToSmedFormat(actualFields, data.map_file);
        |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    452 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
    453 |           } else {
    454 |             console.log('[WebSocket Hub] No valid fields found');

Compiling...
Failed to compile.

SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (451:30)
  449 |           if (actualFields && typeof actualFields === 'object') {
  450 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 451 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  452 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  453 |           } else {
  454 |             console.log('[WebSocket Hub] No valid fields found');
ERROR in ./src/components/AspCliWebTerminal.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (451:30)

  449 |           if (actualFields && typeof actualFields === 'object') {
  450 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 451 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  452 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  453 |           } else {
  454 |             console.log('[WebSocket Hub] No valid fields found');
    at constructor (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6627:19)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12232:12)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9393:13)
    at TypeScriptParserMixin.parseIdentifierName (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12212:12)
    at TypeScriptParserMixin.parseIdentifier (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12182:23)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11416:27)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10855:25)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseExpressionBase (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10779:23)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:17)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12895:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)

webpack compiled with 1 error
ERROR in src/components/AspCliWebTerminal.tsx:451:31
TS1308: 'await' expressions are only allowed within async functions and at the top levels of modules.
    449 |           if (actualFields && typeof actualFields === 'object') {
    450 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
  > 451 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
        |                               ^^^^^
    452 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
    453 |           } else {
    454 |             console.log('[WebSocket Hub] No valid fields found');

Compiling...
Failed to compile.

SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (451:30)
  449 |           if (actualFields && typeof actualFields === 'object') {
  450 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 451 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  452 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  453 |           } else {
  454 |             console.log('[WebSocket Hub] No valid fields found');
ERROR in ./src/components/AspCliWebTerminal.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (451:30)

  449 |           if (actualFields && typeof actualFields === 'object') {
  450 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 451 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  452 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  453 |           } else {
  454 |             console.log('[WebSocket Hub] No valid fields found');
    at constructor (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6627:19)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12232:12)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9393:13)
    at TypeScriptParserMixin.parseIdentifierName (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12212:12)
    at TypeScriptParserMixin.parseIdentifier (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12182:23)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11416:27)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10855:25)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseExpressionBase (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10779:23)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:17)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12895:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)

webpack compiled with 1 error
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:451:31
TS1308: 'await' expressions are only allowed within async functions and at the top levels of modules.
    449 |           if (actualFields && typeof actualFields === 'object') {
    450 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
  > 451 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
        |                               ^^^^^
    452 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
    453 |           } else {
    454 |             console.log('[WebSocket Hub] No valid fields found');

Compiling...
Failed to compile.

SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (455:30)
  453 |           if (actualFields && typeof actualFields === 'object') {
  454 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 455 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  456 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  457 |           } else {
  458 |             console.log('[WebSocket Hub] No valid fields found');
ERROR in ./src/components/AspCliWebTerminal.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (455:30)

  453 |           if (actualFields && typeof actualFields === 'object') {
  454 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 455 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  456 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  457 |           } else {
  458 |             console.log('[WebSocket Hub] No valid fields found');
    at constructor (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6627:19)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12232:12)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9393:13)
    at TypeScriptParserMixin.parseIdentifierName (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12212:12)
    at TypeScriptParserMixin.parseIdentifier (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12182:23)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11416:27)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10855:25)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseExpressionBase (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10779:23)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:17)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12895:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)

webpack compiled with 1 error
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:455:31
TS1308: 'await' expressions are only allowed within async functions and at the top levels of modules.
    453 |           if (actualFields && typeof actualFields === 'object') {
    454 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
  > 455 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
        |                               ^^^^^
    456 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
    457 |           } else {
    458 |             console.log('[WebSocket Hub] No valid fields found');

Compiling...
Failed to compile.

SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (469:30)
  467 |           if (actualFields && typeof actualFields === 'object') {
  468 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 469 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  470 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  471 |           } else {
  472 |             console.log('[WebSocket Hub] No valid fields found');
ERROR in ./src/components/AspCliWebTerminal.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (469:30)

  467 |           if (actualFields && typeof actualFields === 'object') {
  468 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 469 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  470 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  471 |           } else {
  472 |             console.log('[WebSocket Hub] No valid fields found');
    at constructor (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6627:19)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12232:12)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9393:13)
    at TypeScriptParserMixin.parseIdentifierName (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12212:12)
    at TypeScriptParserMixin.parseIdentifier (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12182:23)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11416:27)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10855:25)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseExpressionBase (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10779:23)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:17)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12895:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)

webpack compiled with 1 error
ERROR in src/components/AspCliWebTerminal.tsx:469:31
TS1308: 'await' expressions are only allowed within async functions and at the top levels of modules.
    467 |           if (actualFields && typeof actualFields === 'object') {
    468 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
  > 469 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
        |                               ^^^^^
    470 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
    471 |           } else {
    472 |             console.log('[WebSocket Hub] No valid fields found');

Compiling...
Failed to compile.

SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (467:30)
  465 |           if (actualFields && typeof actualFields === 'object') {
  466 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 467 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  468 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  469 |           } else {
  470 |             console.log('[WebSocket Hub] No valid fields found');
ERROR in ./src/components/AspCliWebTerminal.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (467:30)

  465 |           if (actualFields && typeof actualFields === 'object') {
  466 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 467 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  468 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  469 |           } else {
  470 |             console.log('[WebSocket Hub] No valid fields found');
    at constructor (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6627:19)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12232:12)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9393:13)
    at TypeScriptParserMixin.parseIdentifierName (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12212:12)
    at TypeScriptParserMixin.parseIdentifier (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12182:23)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11416:27)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10855:25)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseExpressionBase (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10779:23)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:17)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12895:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)

webpack compiled with 1 error
Compiling...
ERROR in src/components/AspCliWebTerminal.tsx:469:31
TS1308: 'await' expressions are only allowed within async functions and at the top levels of modules.
    467 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
    468 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  > 469 |           } else {
        |                   ^^^^^
    470 |             console.log('[WebSocket Hub] No valid fields found');
    471 |             processedFields = [];
    472 |           }

Failed to compile.

SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (467:30)
  465 |           if (actualFields && typeof actualFields === 'object') {
  466 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 467 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  468 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  469 |           } else {
  470 |             console.log('[WebSocket Hub] No valid fields found');
ERROR in ./src/components/AspCliWebTerminal.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (467:30)

  465 |           if (actualFields && typeof actualFields === 'object') {
  466 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
> 467 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
      |                               ^
  468 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
  469 |           } else {
  470 |             console.log('[WebSocket Hub] No valid fields found');
    at constructor (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6627:19)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12232:12)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9393:13)
    at TypeScriptParserMixin.parseIdentifierName (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12212:12)
    at TypeScriptParserMixin.parseIdentifier (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12182:23)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11416:27)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10855:25)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseExpressionBase (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10779:23)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:17)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12895:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12858:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12757:17)
    at TypeScriptParserMixin.parseIfStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13130:28)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12796:21)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)

webpack compiled with 1 error
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:467:31
TS1308: 'await' expressions are only allowed within async functions and at the top levels of modules.
    465 |           if (actualFields && typeof actualFields === 'object') {
    466 |             console.log('[WebSocket Hub] Converting MAIN001 menu fields to SMED format');
  > 467 |             processedFields = await loadSmedMapFile(data.map_file || 'MAIN001');
        |                               ^^^^^
    468 |             console.log('[WebSocket Hub] Converted fields count:', processedFields.length);
    469 |           } else {
    470 |             console.log('[WebSocket Hub] No valid fields found');

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:473:53
TS7006: Parameter 'field' implicitly has an 'any' type.
    471 |               
    472 |               // Map field values from actualFields to processedFields
  > 473 |               processedFields = processedFields.map(field => {
        |                                                     ^^^^^
    474 |                 const fieldValue = actualFields[field.name];
    475 |                 if (fieldValue !== undefined && fieldValue !== null) {
    476 |                   return {

ERROR in src/components/AspCliWebTerminal.tsx:484:96
TS7006: Parameter 'f' implicitly has an 'any' type.
    482 |               });
    483 |               
  > 484 |               console.log('[WebSocket Hub] Fields with values mapped:', processedFields.filter(f => f.value).length);
        |                                                                                                ^
    485 |               
    486 |               // SMED 맵 표시
    487 |               const smedData = {

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Failed to compile.

SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/SmedMapDisplay.tsx: Identifier 'inputFields' has already been declared. (238:10)
  236 |     
  237 |     // Auto-focus on first input field after grid initialization
> 238 |     const inputFields = validFields.filter(field => !field.prompt).sort((a, b) => {
      |           ^
  239 |       if (a.row !== b.row) return a.row - b.row;
  240 |       return a.col - b.col;
  241 |     });
ERROR in ./src/components/SmedMapDisplay.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/SmedMapDisplay.tsx: Identifier 'inputFields' has already been declared. (238:10)

  236 |     
  237 |     // Auto-focus on first input field after grid initialization
> 238 |     const inputFields = validFields.filter(field => !field.prompt).sort((a, b) => {
      |           ^
  239 |       if (a.row !== b.row) return a.row - b.row;
  240 |       return a.col - b.col;
  241 |     });
    at constructor (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6627:19)
    at TypeScriptScopeHandler.checkRedeclarationInScope (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:1644:19)
    at TypeScriptScopeHandler.declareName (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:1610:12)
    at TypeScriptScopeHandler.declareName (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4910:11)
    at TypeScriptParserMixin.declareNameFromIdentifier (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:7591:16)
    at TypeScriptParserMixin.checkIdentifier (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:7587:12)
    at TypeScriptParserMixin.checkLVal (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:7526:12)
    at TypeScriptParserMixin.parseVarId (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13412:10)
    at TypeScriptParserMixin.parseVarId (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9767:11)
    at TypeScriptParserMixin.parseVar (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13383:12)
    at TypeScriptParserMixin.parseVarStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13230:10)
    at TypeScriptParserMixin.parseVarStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9493:31)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12851:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseFunctionBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12101:24)
    at TypeScriptParserMixin.parseArrowExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12076:10)
    at TypeScriptParserMixin.parseParenAndDistinguishExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11686:12)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11326:23)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10795:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12427:12)
    at TypeScriptParserMixin.parseMaybeAssignAllowIn (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10795:17)
    at TypeScriptParserMixin.parseMaybeAssignAllowInOrVoidPattern (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12494:17)
    at TypeScriptParserMixin.parseExprListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12176:18)
    at TypeScriptParserMixin.parseCallExpressionArguments (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11247:22)
    at TypeScriptParserMixin.parseCoverCallAndAsyncArrowHead (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11181:29)
    at TypeScriptParserMixin.parseSubscript (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11115:19)
    at TypeScriptParserMixin.parseSubscript (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9353:18)
    at TypeScriptParserMixin.parseSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11089:19)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11080:17)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)

webpack compiled with 1 error
ERROR in src/components/SmedMapDisplay.tsx:145:11
TS2451: Cannot redeclare block-scoped variable 'inputFields'.
    143 |     
    144 |     // Check if there are any input fields (fields without prompt)
  > 145 |     const inputFields = validFields.filter(field => !field.prompt);
        |           ^^^^^^^^^^^
    146 |     const hasInputs = inputFields.length > 0;
    147 |     setHasInputFields(hasInputs);
    148 |     

ERROR in src/components/SmedMapDisplay.tsx:238:11
TS2451: Cannot redeclare block-scoped variable 'inputFields'.
    236 |     
    237 |     // Auto-focus on first input field after grid initialization
  > 238 |     const inputFields = validFields.filter(field => !field.prompt).sort((a, b) => {
        |           ^^^^^^^^^^^
    239 |       if (a.row !== b.row) return a.row - b.row;
    240 |       return a.col - b.col;
    241 |     });

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:1972:38
TS2304: Cannot find name 'currentTerminalId'.
    1970 |                         program: 'MAIN001',
    1971 |                         selection: selection,
  > 1972 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1973 |                         timestamp: new Date().toISOString()
    1974 |                       };
    1975 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1977:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1975 |                       
    1976 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1977 |                       const sent = webSocketService.sendMenuSelection(selection, 'MAIN001', currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1978 |                       
    1979 |                       if (sent) {
    1980 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1977:93
TS2304: Cannot find name 'currentTerminalId'.
    1975 |                       
    1976 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1977 |                       const sent = webSocketService.sendMenuSelection(selection, 'MAIN001', currentTerminalId);
         |                                                                                             ^^^^^^^^^^^^^^^^^
    1978 |                       
    1979 |                       if (sent) {
    1980 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1974:38
TS2304: Cannot find name 'currentTerminalId'.
    1972 |                         program: 'MAIN001',
    1973 |                         selection: selection,
  > 1974 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1975 |                         timestamp: new Date().toISOString()
    1976 |                       };
    1977 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1979:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, 'MAIN001', currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1979:93
TS2304: Cannot find name 'currentTerminalId'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, 'MAIN001', currentTerminalId);
         |                                                                                             ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1974:38
TS2304: Cannot find name 'currentTerminalId'.
    1972 |                         program: 'MAIN001',
    1973 |                         selection: selection,
  > 1974 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1975 |                         timestamp: new Date().toISOString()
    1976 |                       };
    1977 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1979:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, 'MAIN001', currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1979:93
TS2304: Cannot find name 'currentTerminalId'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, 'MAIN001', currentTerminalId);
         |                                                                                             ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1974:38
TS2304: Cannot find name 'currentTerminalId'.
    1972 |                         program: programName,
    1973 |                         selection: selection,
  > 1974 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1975 |                         timestamp: new Date().toISOString()
    1976 |                       };
    1977 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1979:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1979:95
TS2304: Cannot find name 'currentTerminalId'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1974:38
TS2304: Cannot find name 'currentTerminalId'.
    1972 |                         program: programName,
    1973 |                         selection: selection,
  > 1974 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1975 |                         timestamp: new Date().toISOString()
    1976 |                       };
    1977 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1979:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1979:95
TS2304: Cannot find name 'currentTerminalId'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1974:38
TS2304: Cannot find name 'currentTerminalId'.
    1972 |                         program: programName,
    1973 |                         selection: selection,
  > 1974 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1975 |                         timestamp: new Date().toISOString()
    1976 |                       };
    1977 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1979:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1979:95
TS2304: Cannot find name 'currentTerminalId'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1974:38
TS2304: Cannot find name 'currentTerminalId'.
    1972 |                         program: programName,
    1973 |                         selection: selection,
  > 1974 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1975 |                         timestamp: new Date().toISOString()
    1976 |                       };
    1977 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1979:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1979:95
TS2304: Cannot find name 'currentTerminalId'.
    1977 |                       
    1978 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1979 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1980 |                       
    1981 |                       if (sent) {
    1982 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:53
TS2339: Property 'sendMenuSelection' does not exist on type 'WebSocketService'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                     ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2554: Expected 2 arguments, but got 3.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2554: Expected 2 arguments, but got 3.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2554: Expected 2 arguments, but got 3.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2554: Expected 2 arguments, but got 3.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2554: Expected 2 arguments, but got 3.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/components/AspCliWebTerminal.tsx:1975:38
TS2304: Cannot find name 'currentTerminalId'.
    1973 |                         program: programName,
    1974 |                         selection: selection,
  > 1975 |                         terminal_id: currentTerminalId,
         |                                      ^^^^^^^^^^^^^^^^^
    1976 |                         timestamp: new Date().toISOString()
    1977 |                       };
    1978 |                       

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2304: Cannot find name 'currentTerminalId'.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

ERROR in src/components/AspCliWebTerminal.tsx:1980:95
TS2554: Expected 2 arguments, but got 3.
    1978 |                       
    1979 |                       // Use existing WebSocket Hub connection to send menu selection
  > 1980 |                       const sent = webSocketService.sendMenuSelection(selection, programName, currentTerminalId);
         |                                                                                               ^^^^^^^^^^^^^^^^^
    1981 |                       
    1982 |                       if (sent) {
    1983 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/AspCliWebTerminal.tsx:1983:27
TS2801: This condition will always return true since this 'Promise<boolean>' is always defined.
    1981 |                       const sent = webSocketService.sendMenuSelection(programName, selection);
    1982 |                       
  > 1983 |                       if (sent) {
         |                           ^^^^
    1984 |                         console.log('[WEB_TERMINAL_DEBUG] Menu selection sent via WebSocket Hub');
    1985 |                         
    1986 |                         // Add terminal log entry for menu selection

Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Failed to compile.

SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (277:10)
  275 |             success: true
  276 |           };
> 277 |           await sendLogToOpenASPManager(hubConnectionEntry);
      |           ^
  278 |         };
  279 |
  280 |         // Hub 연결 해제 시
ERROR in ./src/components/AspCliWebTerminal.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /home/aspuser/app/ofasp-refactor/src/components/AspCliWebTerminal.tsx: Unexpected reserved word 'await'. (277:10)

  275 |             success: true
  276 |           };
> 277 |           await sendLogToOpenASPManager(hubConnectionEntry);
      |           ^
  278 |         };
  279 |
  280 |         // Hub 연결 해제 시
    at constructor (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6627:19)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12232:12)
    at TypeScriptParserMixin.checkReservedWord (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9393:13)
    at TypeScriptParserMixin.parseIdentifierName (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12212:12)
    at TypeScriptParserMixin.parseIdentifier (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12182:23)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11416:27)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at TypeScriptParserMixin.parseExpressionBase (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10779:23)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10775:17)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12895:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseFunctionBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12101:24)
    at TypeScriptParserMixin.parseArrowExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12076:10)
    at TypeScriptParserMixin.parseParenAndDistinguishExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11686:12)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11326:23)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10795:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseMaybeAssignAllowIn (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10795:17)
    at TypeScriptParserMixin.parseVar (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13384:91)
    at TypeScriptParserMixin.parseVarStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13230:10)
    at TypeScriptParserMixin.parseVarStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9493:31)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12851:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)

webpack compiled with 1 error
ERROR in src/components/AspCliWebTerminal.tsx:277:11
TS1308: 'await' expressions are only allowed within async functions and at the top levels of modules.
    275 |             success: true
    276 |           };
  > 277 |           await sendLogToOpenASPManager(hubConnectionEntry);
        |           ^^^^^
    278 |         };
    279 |
    280 |         // Hub 연결 해제 시

ERROR in src/components/AspCliWebTerminal.tsx:526:9
TS1308: 'await' expressions are only allowed within async functions and at the top levels of modules.
    524 |           success: true
    525 |         };
  > 526 |         await sendLogToOpenASPManager(smedReceivedEntry);
        |         ^^^^^
    527 |         
    528 |       } catch (error) {
    529 |         console.error('[WebSocket Hub] Error processing SMED data:', error);

ERROR in src/components/AspCliWebTerminal.tsx:558:7
TS1308: 'await' expressions are only allowed within async functions and at the top levels of modules.
    556 |         success: data.success
    557 |       };
  > 558 |       await sendLogToOpenASPManager(confirmationEntry);
        |       ^^^^^
    559 |     };
    560 |
    561 |     // Hub 등록 완료 핸들러

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Terminated
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
Compiling...
Compiled successfully!
webpack compiled successfully
Compiling...
No issues found.
Compiled successfully!
webpack compiled successfully
No issues found.
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
[HPM] Error occurred while proxying request localhost:3005/api/smed/layout/SAM001 to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
[HPM] Error occurred while proxying request localhost:3005/api/layout/content/SAM001 to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Failed to compile.

SyntaxError: /home/aspuser/app/ofasp-refactor/src/pages/DatasetConversionPage.tsx: Unexpected token, expected "," (87:3)
  85 | * 00002佐藤花子           ADMIN     20230315A satohana@example.com                       
  86 | * 00003山田次郎           DEVELOP   20220710A yamada@example.com                         `;
> 87 |   };
     |    ^
  88 |
  89 |   const handleFileSelect = () => {
  90 |     fileInputRef.current?.click();
ERROR in ./src/pages/DatasetConversionPage.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /home/aspuser/app/ofasp-refactor/src/pages/DatasetConversionPage.tsx: Unexpected token, expected "," (87:3)

  85 | * 00002佐藤花子           ADMIN     20230315A satohana@example.com                       
  86 | * 00003山田次郎           DEVELOP   20220710A yamada@example.com                         `;
> 87 |   };
     |    ^
  88 |
  89 |   const handleFileSelect = () => {
  90 |     fileInputRef.current?.click();
    at constructor (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6627:19)
    at TypeScriptParserMixin.unexpected (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6647:16)
    at TypeScriptParserMixin.expect (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:6927:12)
    at TypeScriptParserMixin.parseCallExpressionArguments (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11238:14)
    at TypeScriptParserMixin.parseCoverCallAndAsyncArrowHead (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11181:29)
    at TypeScriptParserMixin.parseSubscript (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11115:19)
    at TypeScriptParserMixin.parseSubscript (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9353:18)
    at TypeScriptParserMixin.parseSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11089:19)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11080:17)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10795:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseMaybeAssignAllowIn (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10795:17)
    at TypeScriptParserMixin.parseVar (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13384:91)
    at TypeScriptParserMixin.parseVarStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13230:10)
    at TypeScriptParserMixin.parseVarStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9493:31)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12851:23)
    at TypeScriptParserMixin.parseStatementContent (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9527:18)
    at TypeScriptParserMixin.parseStatementLike (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12767:17)
    at TypeScriptParserMixin.parseStatementListItem (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12747:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13316:61)
    at TypeScriptParserMixin.parseBlockBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13309:10)
    at TypeScriptParserMixin.parseBlock (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13297:10)
    at TypeScriptParserMixin.parseFunctionBody (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12101:24)
    at TypeScriptParserMixin.parseArrowExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12076:10)
    at TypeScriptParserMixin.parseParenAndDistinguishExpression (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11686:12)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11326:23)
    at TypeScriptParserMixin.parseExprAtom (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:4794:20)
    at TypeScriptParserMixin.parseExprSubscripts (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11076:23)
    at TypeScriptParserMixin.parseUpdate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11061:21)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:11041:23)
    at TypeScriptParserMixin.parseMaybeUnary (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9852:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10894:61)
    at TypeScriptParserMixin.parseExprOps (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10899:23)
    at TypeScriptParserMixin.parseMaybeConditional (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10876:23)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10826:21)
    at TypeScriptParserMixin.parseMaybeAssign (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:9801:20)
    at /home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10795:39
    at TypeScriptParserMixin.allowInAnd (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:12422:16)
    at TypeScriptParserMixin.parseMaybeAssignAllowIn (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:10795:17)
    at TypeScriptParserMixin.parseVar (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13384:91)
    at TypeScriptParserMixin.parseVarStatement (/home/aspuser/app/ofasp-refactor/node_modules/@babel/parser/lib/index.js:13230:10)

webpack compiled with 1 error
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/pages/DatasetConversionPage.tsx:87:4
TS1005: ')' expected.
    85 | * 00002佐藤花子           ADMIN     20230315A satohana@example.com                       
    86 | * 00003山田次郎           DEVELOP   20220710A yamada@example.com                         `;
  > 87 |   };
       |    ^
    88 |
    89 |   const handleFileSelect = () => {
    90 |     fileInputRef.current?.click();

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
[HPM] Error occurred while proxying request localhost:3005/api/catalog/layout to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
[HPM] Error occurred while proxying request localhost:3005/api/layout/content/SAM001 to http://localhost:8000/ [ECONNREFUSED] (https://nodejs.org/api/errors.html#errors_common_system_errors)
